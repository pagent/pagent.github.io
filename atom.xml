<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Pagent]]></title>
  <subtitle><![CDATA[静的サイトジェネレーター（SSG）とGitレポジトリでブログ]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://pagent.github.io/"/>
  <updated>2014-11-29T06:05:13.132Z</updated>
  <id>http://pagent.github.io/</id>
  
  <author>
    <name><![CDATA[Pagent]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[HexoやOctopressのトップページの表示を全文表示ではなく概要表示にする]]></title>
    <link href="http://pagent.github.io/2014/11/29/excerpt-separator/"/>
    <id>http://pagent.github.io/2014/11/29/excerpt-separator/</id>
    <published>2014-11-29T04:37:03.000Z</published>
    <updated>2014-11-29T06:03:54.000Z</updated>
    <content type="html"><![CDATA[<p>Hexoでトップページを表示した時、複数の記事の全文がだらだらと表示されているのは見づらいと思い、前半部分を抜粋した概要表示にしてみた。<br>やり方は簡単で、記事ソースの適当な箇所に<code>&lt;!-- more --&gt;</code>というタグを挿入するだけ。  </p>
<p>WordPressやMovable Typeでは、200文字など決まった文字数で自動的に抜粋してくれたりもするが、その方法はちょっと分からないので、手動で挿入した。<br>タグを挿入すると<code>&lt;!-- more --&gt;</code>より前の部分だけの表示になる。<br>続きを読むためのリンクの文言「Read More」はHexo作業フォルダの_config.ymlではなく、themes/landscape/_config.ymlなどテーマ毎の_config.ymlで変更出来る。  </p>
<p>Octopressの場合は_config.ymlの<code>excerpt_link:</code>でリンクの文言を変えられる。<br>また_config.ymlの<code>excerpt_link:</code>で、抜粋するためのタグ自体を<code>&lt;!-- more --&gt;</code>から別のものに変更出来るようだ。  </p>
<p>ーー<br>（追記）<br>概要表示にはしてみたが、全文表示の方が都合の良いことがあったので、あとで全ての記事から<code>&lt;!-- more --&gt;</code>タグを削除した。<br>_postsで端末を開き、下記コマンドですべての.mdファイルから<code>&lt;!-- more --&gt;</code>を一括削除。</p>
<pre><code>// すべての.mdファイルに拡張子.bakをつけてバックアップを取り、ファイル内の&lt;!-- more --&gt;を削除
$ perl -p -i.bak -e &#39;s/&lt;!-- more --&gt;//g&#39; *.md
</code></pre><p><code>&lt;!-- more --&gt;</code>が正常に削除されたことを確認後、.bakファイルを一括削除した。  </p>
<pre><code>// 拡張子が「.bak」のファイルをカレントディレクトリで一括削除
$ find . -type f -name &quot;*.bak&quot; -delete
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>Hexoでトップページを表示した時、複数の記事の全文がだらだらと表示されているのは見づらいと思い、前半部分を抜粋した概要表示にしてみた。<br>やり方は簡単で、記事ソースの適当な箇所に<code>&lt;!-- more --&gt;</code>というタグを挿入するだけ。]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
      <category term="Octopress" scheme="http://pagent.github.io/tags/Octopress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[.deploy/.git/objectsが大きくなってきたのでgit gcしてみた]]></title>
    <link href="http://pagent.github.io/2014/11/28/git-gc/"/>
    <id>http://pagent.github.io/2014/11/28/git-gc/</id>
    <published>2014-11-28T12:31:38.000Z</published>
    <updated>2014-11-28T13:34:30.000Z</updated>
    <content type="html"><![CDATA[<p>それほど記事数は多くないのに、Hexoのサイズが大きくなって来た。<br>最初、数MBだったのが20MB以上になっている。  </p>
<p>.deploy/.git/objectsが12.4MBあって、一番容量をくっているようだ。<br>ちょこちょこ記事を修正してその度にdeployしているせいだろう。<br>大した容量ではないが、Dropboxの同期に時間が掛かるのが困る。  </p>
<p>必要性の低いようなオブジェクトが多数あったりすると、自動的にパックファイルを作って掃除（pack up）してくれるようだが、<code>git gc</code>コマンドにより手動でpack upすることも出来るらしい。<br><a href="http://heart-shaped-chocolate.hatenablog.jp/entry/2013/04/10/052752" target="_blank" rel="external">.git/objectsについて少し調べてみた - 煙と消えるその前に</a>  </p>
<p>GitHubではないが、BitbucketのFAQには<code>git gc</code>してもリポジトリに悪い影響はないと書いてあった。<br><a href="https://confluence.atlassian.co.jp/pages/viewpage.action?pageId=35815474" target="_blank" rel="external">私のリポジトリで git gc (保全作業) を実行する必要がありますか？ - Bitbucket ドキュメンテーション - アトラシアン日本語ドキュメント</a>  </p>
<p>早速、.deployで端末を開いて、<code>git gc</code>してみた。  </p>
<pre><code>$ git gc
Counting objects: 5328, done.
Delta compression using up to 8 threads.
Compressing objects:   5% (153/3046)   
Compressing objects: 100% (3046/3046), done.
Writing objects: 100% (5328/5328), done.
Total 5328 (delta 2157), reused 0 (delta 0)
</code></pre><p>objects下にたくさんあったフォルダが消えて、4つだけになった。<br>objects/pack内にはpack-〜.idxとpack-〜.packというファイルが出来てる。<br>objectsのサイズは12.4MB→1.8MBに縮小した。  </p>
<p>あんまり頻回に更新しなくてもいいように、プレビュー時にはちゃんと校正しなければ。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>それほど記事数は多くないのに、Hexoのサイズが大きくなって来た。<br>最初、数MBだったのが20MB以上になっている。  </p>
<p>.deploy/.git/objectsが12.4MBあって、一番容量をくっているようだ。<br>ちょこちょこ記事を修正してその度に]]>
    </summary>
    
      <category term="Git" scheme="http://pagent.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[初心者がMetalsmithを試してみた]]></title>
    <link href="http://pagent.github.io/2014/11/28/metalsmith/"/>
    <id>http://pagent.github.io/2014/11/28/metalsmith/</id>
    <published>2014-11-28T06:22:40.000Z</published>
    <updated>2014-11-29T04:11:59.000Z</updated>
    <content type="html"><![CDATA[<p>静的サイトジェネレーターは有名なものしか知らなかったが、かなりの数が公開されているようだ。<br><a href="https://staticsitegenerators.net/" target="_blank" rel="external">https://staticsitegenerators.net/</a><br><a href="https://www.staticgen.com/" target="_blank" rel="external">https://www.staticgen.com/</a>  </p>
<p><a href="https://github.com/segmentio/metalsmith" target="_blank" rel="external">Metalsmith</a>（An extremely simple, pluggable static site generator.）というのが人気急上昇中のようなので、試してみた。<br>Hexo同様、プログラミング言語がJavaScriptなので、早さも期待できる。  </p>
<p>テストするにあたり、下記サイトを参考にさせて頂いた。<br><a href="http://h2ham.net/metalsmith-static-site-generator" target="_blank" rel="external">Nodeで動作する静的サイトジェネレータ「metalsmith」を使ってみた - HAM MEDIA MEMO</a><br><a href="http://web-layman.com/metalsmith-simple-static-site-generator/" target="_blank" rel="external">metalsmith - シンプルな静的サイトジェネレーター - Layman’s Web Creation.</a>  </p>
<p>先ずはpackage.json を用意して導入するプラグインを指定、一括インストールするのが良いようなのだが、本体やプラグインのバージョンがよく分からない。<br>なのでmetalsmith-testという作業フォルダを作り、そこで端末を開いて一個一個インストールした。  </p>
<pre><code>~/metalsmith-test$ npm install metalsmith
~/metalsmith-test$ npm install metalsmith-templates
~/metalsmith-test$ npm install swig
~/metalsmith-test$ npm install metalsmith-markdown
~/metalsmith-test$ npm install metalsmith-permalinks
~/metalsmith-test$ npm install metalsmith-sass
~/metalsmith-test$ npm install metalsmith-watch
~/metalsmith-test$ npm install metalsmith-drafts
</code></pre><p>次に作業フォルダ内にmetalsmith.jsonを作成する必要があったが、これはjekyllの構成に倣ったexampleのものをほぼそのまま使わせてもらった。<br><a href="https://github.com/segmentio/metalsmith/blob/master/examples/jekyll/metalsmith.json" target="_blank" rel="external">https://github.com/segmentio/metalsmith/blob/master/examples/jekyll/metalsmith.json</a></p>
<pre><code>{
  &quot;source&quot;: &quot;./_posts&quot;,
  &quot;destination&quot;: &quot;./_site&quot;,
  &quot;metadata&quot;: {
    &quot;title&quot;: &quot;My Jekyll-Powered Blog&quot;,
    &quot;description&quot;: &quot;My second, super-cool, Jekyll-powered blog.&quot;
  },
  &quot;plugins&quot;: {
    &quot;metalsmith-drafts&quot;: {},
    &quot;metalsmith-markdown&quot;: {},
    &quot;metalsmith-permalinks&quot;: {
      &quot;pattern&quot;: &quot;:title&quot;
    },
    &quot;metalsmith-sass&quot;: {
        &quot;outputStyle&quot;: &quot;expanded&quot;
    },
    &quot;metalsmith-templates&quot;: {
      &quot;engine&quot;: &quot;swig&quot;,
      &quot;directory&quot;: &quot;_layouts&quot;
    }
  }
}
</code></pre><p>_layoutsフォルダを作り、そこへ下記内容のpost.htmlを配置。  </p>
<pre><code>&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;My Blog&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;初心者がMetalsmithを試してみた&lt;/h1&gt;
  &lt;time&gt;2014-11-28&lt;/time&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>_postsフォルダを作り、テスト用の記事test-post-1.mdを配置。  </p>
<pre><code>---
template: post.html
title: テスト投稿１
date: 2014-11-28
---
##今日の天気
本日は晴天なり。
</code></pre><p><code>node node_modules/.bin/metalsmith</code>とコマンドを打つと、自動的に_siteフォルダ、その下にtest-post-1フォルダ、その中にindex.htmlが生成された。  </p>
<pre><code>&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;My Blog&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;テスト投稿&lt;/h1&gt;
  &lt;time&gt;2014-11-28&lt;/time&gt;
  &lt;h2 id=&quot;-&quot;&gt;今日の天気&lt;/h2&gt;
&lt;p&gt;本日は晴天なり。&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>ローカルホスト上でプレビューを可能にするプラグインmetalsmith-serveというのがあったのでインストールしたが、どう使えばいいのかよく分からない。  </p>
<p>metalsmith.jsonの<code>&quot;plugins&quot;:</code>の箇所に無理やり  </p>
<pre><code>    &quot;metalsmith-serve&quot;: {
      &quot;port&quot;: &quot;8081&quot;,
      &quot;verbose&quot;: &quot;true&quot;
    }
</code></pre><p>と加えてみたら、<code>node node_modules/.bin/metalsmith</code>のコマンドで、生成と共にローカルホストが立ち上がった。<br>ブラウザで<code>http://localhost:8081/test-post-1/</code>にアクセスすると、CSSは当たっていないが表示はされた。  </p>
<p>たぶん正しい使い方ではないのだと思うが、プラグインの説明の  </p>
<pre><code>var metalsmith = require(&#39;metalsmith&#39;);
var serve = require(&#39;metalsmith-serve&#39;);

metalsmith(__dirname)
  .use(serve())
  .build();
</code></pre><p>というのを何処で設定するのか分からない。  </p>
<p>トップページの生成の仕方やCSSの当て方なども勉強する必要がありそう。<br>それに、新規記事作成やgenerate、プレビューなど、それぞれコマンドに割り当てて操作したいところ。  </p>
<p>Metalsmithのサイトの上方に記載してある  </p>
<pre><code>Metalsmith(__dirname)
  .use(drafts())
  .use(markdown())
  .use(permalinks(&#39;posts/:title&#39;))
  .use(templates(&#39;handlebars&#39;))
  .build();
</code></pre><p>というのも、いったいどこの記載のことなんだか。</p>
<p>「Everything is a Plugin」と謳われているようにカスタマイズ性は高そうだが、自分のようにJekyllの使い方が分からずOctopressに移った初心者には、少々ハードルが高そうだ。<br>静的サイトジェネレーターの仕組みを勉強するには良さそうだが。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>静的サイトジェネレーターは有名なものしか知らなかったが、かなりの数が公開されているようだ。<br><a href="https://staticsitegenerators.net/" target="_blank" rel="external">https://stati]]>
    </summary>
    
      <category term="Metalsmith" scheme="http://pagent.github.io/tags/Metalsmith/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexoは中国製のようだ]]></title>
    <link href="http://pagent.github.io/2014/11/27/hexo-china/"/>
    <id>http://pagent.github.io/2014/11/27/hexo-china/</id>
    <published>2014-11-27T11:13:57.000Z</published>
    <updated>2014-11-29T04:11:25.000Z</updated>
    <content type="html"><![CDATA[<p>しばらく前に静的サイトジェネレーターをOctopressからHexoに乗り換えた。<br>カスタマイズもわりと容易だしgenerateも早いし、気に入って使っている。  </p>
<p>公開されているカスタムテーマを見ていて、なぜかデモサイトに中国語が多いなと不信に思っていが、オフィシャルテーマ３つのLICENSEを見ると３つとも中国人っぽい名前が記載されている。  </p>
<p>よく見ると、レポジトリもオフィシャルサイトもこの中国人らしい人のものだった。<br>なんとHexoは中国製だったんだね。</p>
<p>中国と聞くと正直ちょっと心配になってしまう。<br>中国製のパソコンに不正プログラムが入っていたなんてニュースもあったし。<br>ただ、cloneしてくるHexoのソースはGitHub上で公開されているものだし、大丈夫なのだろう。  </p>
<p>中国人、なかなかやるね。<br>ちょっとくやしい気がする。  </p>
<p>日本製の秀逸な静的サイトジェネレーターが出てきてくれないものだろうか。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>しばらく前に静的サイトジェネレーターをOctopressからHexoに乗り換えた。<br>カスタマイズもわりと容易だしgenerateも早いし、気に入って使っている。  </p>
<p>公開されているカスタムテーマを見ていて、なぜかデモサイトに中国語が多いなと不信に思ってい]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo新規記事作成時のタイトル大文字アルファベットを小文字のファイル名に]]></title>
    <link href="http://pagent.github.io/2014/11/26/filename-case/"/>
    <id>http://pagent.github.io/2014/11/26/filename-case/</id>
    <published>2014-11-26T09:50:31.000Z</published>
    <updated>2014-11-29T04:11:08.000Z</updated>
    <content type="html"><![CDATA[<p>Hexoのデフォルト設定で新規記事を作成する際、記事タイトルに大文字アルファベットを使うと、そのままファイル名としてソースが作成される。</p>
<pre><code>$ hexo new New-Post
[info] File created at /.../source/_posts/2014-11-26-New-Post.md
</code></pre><p>URLに大文字アルファベットが入ってしまう。  </p>
<p>URLに大文字は使いたくないので、Octopressのように大文字→小文字でファイル出力して欲しい。  </p>
<p>_config.ymlのWritingの項目<code>filename_case:</code>の値をデフォルトの「0」から「1」に変更することで設定出来た。  </p>
<pre><code>$ hexo new New-Post
[info] File created at /.../source/_posts/2014-11-26-new-post.md
</code></pre><p>filename_case: 0（そのまま出力。New-Post→New-Post）  </p>
<p>filename_case: 1（大文字を小文字に変換。New-Post→new-post.md）  </p>
<p>filename_case: 2（すべて大文字に変換。New-Post→NEW-POST.md）  </p>
<p>ーー<br>（追記）<br>出来たと思ったら、generateした際にtagsまでがすべて小文字になってしまった。<br>これでは困るので、<code>filename_case: 0</code>に戻した。<br>当面、大文字のファイル名は手作業で小文字にするしかなさそうだ。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexoのデフォルト設定で新規記事を作成する際、記事タイトルに大文字アルファベットを使うと、そのままファイル名としてソースが作成される。</p>
<pre><code>$ hexo new New-Post
[info] File created at /.../sourc]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HexoのソースをBitbucketに置く]]></title>
    <link href="http://pagent.github.io/2014/11/26/hexo-bitbucket/"/>
    <id>http://pagent.github.io/2014/11/26/hexo-bitbucket/</id>
    <published>2014-11-26T07:47:16.000Z</published>
    <updated>2014-11-29T04:11:16.000Z</updated>
    <content type="html"><![CDATA[<p>Hexoの作業フォルダはWindows領域のDropboxフォルダに置き、他のPCとも同期をとっている。<br>これでソースを消失してしまう危険はかなり低いと思うが、Dropboxと同期する際、結構時間がかかってしまう。<br>普段はDropboxを起動しておらず時々立ち上げる、という形をとっているせいもあるかもしれない。  </p>
<p>Bitbucketにソースを置いたらpushするのはそれほど時間は掛からないだろうし、過去の履歴も残ってくれてやはり便利だろうと思い、HexoのソースをBitbucketに置くことにした。  </p>
<p>OctopressのソースをBitbucketに置いた時と同様、Bitbucketにhexoという名前のリポジトリを作り、  </p>
<pre><code>$ git remote add bitbucket git@bitbucket.org:ユーザー名/hexo.git
$ git push -u bitbucket source
</code></pre><p>とやったが、エラーになる。  </p>
<p>新規リポジトリを作成後に表示されたRepository setupの指示に倣い、  </p>
<pre><code>$ git init
$ git remote add bitbucket git@bitbucket.org:ユーザー名/hexo.git
$ echo &quot;ユーザー名&quot; &gt;&gt; contributors.txt
$ git add contributors.txt
$ git commit -m &#39;Initial commit with contributors&#39;
$ git push -u bitbucket source
</code></pre><p>としても、やはり  </p>
<pre><code>error: src refspec source does not match any.
error: failed to push some refs to &#39;git@bitbucket.org:ユーザー名/hexo.git&#39;
</code></pre><p>とエラーになる。  </p>
<p>pushするbranchをsourceではなく、masterにしてみた。  </p>
<pre><code>$ git push -u bitbucket master
Counting objects: 3, done.
Writing objects: 100% (3/3), 239 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@bitbucket.org:ユーザー名/hexo.git
 * [new branch]      master -&gt; master
Branch master set up to track remote branch master from bitbucket.
</code></pre><p>上手く行ったようだ。  </p>
<p>だが、その後も  </p>
<pre><code>$ git add .
warning: You ran &#39;git add&#39; with neither &#39;-A (--all)&#39; or &#39;--ignore-removal&#39;,
whose behaviour will change in Git 2.0 with respect to paths you removed.
Paths like &#39;contributors.txt&#39; that are
removed from your working tree are ignored with this version of Git.

* &#39;git add --ignore-removal &lt;pathspec&gt;&#39;, which is the current default,
  ignores paths you removed from your working tree.

* &#39;git add --all &lt;pathspec&gt;&#39; will let you also record the removals.

Run &#39;git status&#39; to check the paths you removed from your working tree.
</code></pre><p>と言われたり、  </p>
<pre><code>$ git push
warning: push.default is unset; its implicit value is changing in
Git 2.0 from &#39;matching&#39; to &#39;simple&#39;. To squelch this message
and maintain the current behavior after the default changes, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

When push.default is set to &#39;matching&#39;, git will push local branches
to the remote branches that already exist with the same name.

In Git 2.0, Git will default to the more conservative &#39;simple&#39;
behavior, which only pushes the current branch to the corresponding
remote branch that &#39;git pull&#39; uses to update the current branch.

See &#39;git help config&#39; and search for &#39;push.default&#39; for further information.
(the &#39;simple&#39; mode was introduced in Git 1.7.11. Use the similar mode
&#39;current&#39; instead of &#39;simple&#39; if you sometimes use older versions of Git)
</code></pre><p>と言われたり。  </p>
<p><code>git add .</code>は使われなくなったので<code>git add -A</code>にしないといけないということか？<br><code>git add .</code>でもすんなり通る時もあるのは、状況の違いからだろうか。<br>（追記：そう言えば、Initial commitの時に作成されたcontributors.txtという中身が自分のユーザー名だけのファイルを、レポジトリとHexoの作業フォルダ両方から手動で削除したんだった。<br>これのせいだったのかもしれない。）</p>
<p>push.defaultもmatchingにした。  </p>
<pre><code>  $ git config --global push.default matching
</code></pre><p>これでようやくpush出来るようになった。  </p>
<p>gitの仕組みがいまいちよく分からない。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexoの作業フォルダはWindows領域のDropboxフォルダに置き、他のPCとも同期をとっている。<br>これでソースを消失してしまう危険はかなり低いと思うが、Dropboxと同期する際、結構時間がかかってしまう。<br>普段はDropboxを起動しておらず時々立ち上]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
      <category term="Git" scheme="http://pagent.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo→Octopress変換スクリプト「Hexo to Octopress Converter」]]></title>
    <link href="http://pagent.github.io/2014/11/25/hexo-to-octopress-converter/"/>
    <id>http://pagent.github.io/2014/11/25/hexo-to-octopress-converter/</id>
    <published>2014-11-25T11:59:04.000Z</published>
    <updated>2014-11-29T04:11:00.000Z</updated>
    <content type="html"><![CDATA[<p>HexoからOctopressに記事ソースを変換するrubyスクリプト<a href="https://github.com/ciffel/Hexo-to-Octopress-Converter" target="_blank" rel="external">「Hexo to Octopress Converter」</a>を試してみた。  </p>
<p>「Download ZIP」からzipファイルをダウンロードし展開。converterファイルを作業したい場所に移し、端末から操作。  </p>
<pre><code>$ ./converter &lt;hexo_posts_dir&gt; &lt;octopress_posts_dir&gt;
</code></pre><p>で変換出来る。<br><code>&lt;octopress_posts_dir&gt;</code>は適当に作ったフォルダでも可。  </p>
<p>変換が終了すると、ファイル名に日付けが付加されたものがOctopressのフォルダに出力される。（拡張子は.mdのまま。）<br>出力されたファイルのFront Matter部分は<code>tags:</code>が<code>categories:</code>に変換されており、また上部の<code>---</code>および<code>layout: post</code>、<code>comments: true</code>が追加される。  </p>
<p>だが、Octopressのソースを「hexo-migrator-octopress」などでHexoに取り込んでいた場合は、Front Matter上部に既に<code>---</code>が<br>ついている。<br>この状態からだと<code>tags:</code>が<code>categories:</code>に変換されないので、上部の<code>---</code>を消しておく必要がある。  </p>
<p>また<code>title:</code>の項目で記事タイトルが「”」で挟まれていると、さらに「”」で挟まれ<code>title: &quot;&quot;（記事タイトル）&quot;&quot;</code>のようになってしまう。<br>これではOctopressでgenerateする際エラーになってしまうので、これも削除し、  </p>
<pre><code>title:
date:
tags:
---
</code></pre><p>のような形にしておく必要がある。<br><a href="/2014/11/25/hexo-migrator-octopress/">Octopress→Hexo移行のプラグイン「hexo-migrator-octopress」を試してみた </a>  </p>
<p>なお、変換出力されるのは拡張子が.mdのものだけで、.markdownのもの（Octopressのソースをコピペで取り込んだような場合）は変換出力されず無視される。  </p>
<p>変換後のファイル名には日付けが付加されるので、Hexoの運用をOctopress式に日付けをつけたファイル名で行っている場合は、日付けが2重になってしまう。  </p>
<p>この場合はconverterファイルをエディタで開き、41行目  </p>
<p>  file_name = “#{prefix}-#{base_name}”<br>の<code>#{prefix}-</code>を削除し、  </p>
<p>  file_name = “#{base_name}”<br>にしておくと、日付けが付加されない。  </p>
<p>それから、Hexoは漢字、ひらがな含め日本語のURLやtagsを使用可能だが、Octopressはデフォルトの状態では日本語を使用できない。<br>HexoからOctopressに移行する際には、この点も注意が必要。</p>
<p>ーー<br>HexoもOctopressも、共にmarkdown形式のファイルをhtmlに変換するという点では同じなのだが、細かいところが微妙に違っていて少し不便。<br>記事ソースの形式くらいは合わせられなかったものだろうか。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>HexoからOctopressに記事ソースを変換するrubyスクリプト<a href="https://github.com/ciffel/Hexo-to-Octopress-Converter" target="_blank" rel="external">「Hexo t]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
      <category term="Octopress" scheme="http://pagent.github.io/tags/Octopress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Octopress→Hexo移行のプラグイン「hexo-migrator-octopress」を試してみた]]></title>
    <link href="http://pagent.github.io/2014/11/25/hexo-migrator-octopress/"/>
    <id>http://pagent.github.io/2014/11/25/hexo-migrator-octopress/</id>
    <published>2014-11-25T09:20:00.000Z</published>
    <updated>2014-11-29T04:10:51.000Z</updated>
    <content type="html"><![CDATA[<p>OctopressとHexoでは記事ソースのファイルの形式やFront Matter（<code>---</code>で区切られた、title、dateなどの部分）が微妙に異なる。<br>OctopressのcategoriesはHexoではtagsに相当したり。  </p>
<p>Octopressの記事ソースをHexoに取り込む<a href="https://github.com/sailxjx/hexo-migrator-octopress" target="_blank" rel="external">「hexo-migrator-octopress」</a>というHexo用プラグインがあったので、試してみた。<br>（Hexoの記事ソースをOctopress用に変換するスクリプト「Hexo to Octopress Converter」とは逆向き。）  </p>
<p>デスクトップ上にhexo-test（Hexoフォルダ）とoctopress-test（Octopressフォルダ）を作った。  </p>
<p>hexo-testで端末を開き、プラグインをインストール。  </p>
<pre><code>$ npm install hexo-migrator-octopress
</code></pre><p>コマンド<code>hexo migrate octopress &lt;source&gt;</code>で記事ソースが変換され、Hexoに取り込まれる。（<code>&lt;source&gt;</code>はOctopressフォルダへのパス）<br>今回のテスト環境では</p>
<pre><code>$ hexo migrate octopress ~/Desktop/octopress-test
</code></pre><p>octopress-test/source/_posts/2014-10-25-cosmos.markdownがhexo-test/source/_posts/cosmos.mdとして取り込まれた。<br>（Hexoのデフォルト設定に従い、日付けが削除さるようだ。）  </p>
<p>Front MatterはOctopressの  </p>
<pre><code>---
layout: post
title: &quot;畑一面のコスモスはなぜ？&quot;
date: 2014-10-25 15:41:22 +0900
comments: true
categories:
- 未分類
- 写真
---
</code></pre><p>から  </p>
<pre><code>---
layout: post
title: &quot;畑一面のコスモスはなぜ？&quot;
date: 2014-10-25 15:41:22 +0900
comments: true
tags:
- 未分類
- 写真
---
</code></pre><p>に変換されたが、変更は<code>categories:</code>が<code>tags:</code>になっただけのようだ。  </p>
<p>この状態でもHexoで使えるのだが、これを「Hexo to Octopress Converter」でOctopress用に再変換すると  </p>
<pre><code>---
layout: post
comments: true
---
layout: post
title: &quot;畑一面のコスモスはなぜ？&quot;
date: 2014-10-25 15:41:22 +0900
comments: true
tags:
- 未分類
- 写真
---
</code></pre><p>となってしまい、<code>tags:</code>が<code>categories:</code>に変換されない。  </p>
<p>上部の<code>---</code>を削除しておくと<code>categories:</code>に変換はされたが、タイトルの部分が<code>title: &quot;&quot;畑一面のコスモスはなぜ？&quot;&quot;</code>と「”」が重複しまい、rake generateでエラーになる。  </p>
<p>結局、Octopress用に再変換する場合には、「hexo-migrator-octopress」でHexo用に変換したものを手作業で  </p>
<pre><code>title: 畑一面のコスモスはなぜ？
date: 2014-10-25 15:41:22 +0900
tags:
- 未分類
- 写真
---
</code></pre><p>のように変更しておく必要がありそうだ。<br>それにOctopressでcategoriesとtagsを両方使っていた場合は変換後<code>tags:</code>が重複してしまう。  </p>
<p>それから、Hexoの新規記事ソースはデフォルトでは日付けがつかないが、_config.ymlの<code>new_post_name:</code>で日付けをつけることが出来る。<br>日付けがあった方が同じタイトルの記事を複数書けたり、過去記事編集の際に探し易かったりと、なにかと都合が良い。  </p>
<p>Octopressの方のファイル拡張子が.markdownではなく.mdなら「Hexo to Octopress Converter」で変換しても日付けが削除されないので、前もって.mdに変えておいた方が良いかもしれない。<br>拡張子が.mdでも<code>tags:</code>は<code>categories:</code>に変換される。  </p>
<p>拡張子の一括変換は/_postsディレクトリで  </p>
<pre><code>$ rename &#39;s/.markdown/.md/&#39; *.markdown
</code></pre><p>とするか、ファイルマネージャーThunarを使えば簡単のようだ。  </p>
<p>ーー<br>（関連記事）<br><a href="/2014/11/25/Hexo-to-Octopress-Converter/">Hexo→Octopress変換スクリプト「Hexo to Octopress Converter」</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>OctopressとHexoでは記事ソースのファイルの形式やFront Matter（<code>---</code>で区切られた、title、dateなどの部分）が微妙に異なる。<br>OctopressのcategoriesはHexoではtagsに相当したり。  </p]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
      <category term="Octopress" scheme="http://pagent.github.io/tags/Octopress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WindowsでHexoを使う（deploy）]]></title>
    <link href="http://pagent.github.io/2014/11/24/hexo-windows-deploy/"/>
    <id>http://pagent.github.io/2014/11/24/hexo-windows-deploy/</id>
    <published>2014-11-24T11:31:27.000Z</published>
    <updated>2014-11-29T04:10:28.000Z</updated>
    <content type="html"><![CDATA[<p>Windows 7にインストールしたHexoだが、作業フォルダはLinuxと共用なので、そのままdeploy出来るかと思ったが、  </p>
<pre><code>Run

  git config --global user.email &quot;you@example.com&quot;
  git config --global user.name &quot;Your Name&quot;
</code></pre><p>と言われてしまった。  </p>
<p>メールアドレスとGithubユーザー名を設定してdeployしようとしたが、  </p>
<pre><code>Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre><p>とrejectされる。  </p>
<p>SSHキーの設定が必要のようなので、Linuxで設定したSSH公開鍵を<code>C:\Users\（ユーザー名）\.ssh</code>にコピペしたが、やはりrejectされる。<br>秘密鍵もコピペしたら、ようやくdeploy出来た。<br>これで無事WindowsでもHexoを使えるようになった。  </p>
<p>Hexoにはローカルホストで使う管理画面プラグインもあるようなので、もう少し導入が簡単になればWindowsユーザーにも「静的サイトジェネレーター」が広まる可能性がありそうだ。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Windows 7にインストールしたHexoだが、作業フォルダはLinuxと共用なので、そのままdeploy出来るかと思ったが、  </p>
<pre><code>Run

  git config --global user.email &quot;you@example]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WindowsでHexoを使う（インストール）]]></title>
    <link href="http://pagent.github.io/2014/11/24/hexo-windows/"/>
    <id>http://pagent.github.io/2014/11/24/hexo-windows/</id>
    <published>2014-11-24T09:32:37.000Z</published>
    <updated>2014-11-29T04:10:19.000Z</updated>
    <content type="html"><![CDATA[<p>以前、静的サイトジェネレーターnanocをWindowsにインストールしたが、なんとかインストールは出来たものの、compile（generate）してhtmlファイルを生成する際、エラーになり使えなかった。<br>最近使い始めたHexoは、nanocやOctopressと違い、rubyではなくNode.jsで動いているそうなので、Windowsで使えるかもしれないと思い、試してみた。  </p>
<p>結果、Windowsで実用可能だった。</p>
<h3 id="Node-jsのインストール">Node.jsのインストール</h3>
<p>Node.jsは下記からWindows用インストーラー付きのWindows Installer (.msi)をダウンロードし、デフォルトの設定のままインストールした。<br><a href="http://nodejs.org/download/" target="_blank" rel="external">http://nodejs.org/download/</a><br>バージョンはXubuntuに入れたのと同じv0.10.33だった。  </p>
<h3 id="msysgitのインストール">msysgitのインストール</h3>
<p>Windowsでgitを使うため<a href="http://msysgit.github.io/" target="_blank" rel="external">msysgit</a>をインストールした。<br>インストールオプションは下記サイトを参考にさせて頂いた。<br><a href="http://d.hatena.ne.jp/xyk/20130920/1379659991" target="_blank" rel="external">Windows に msysgit をインストールして git 環境を作る - xykの日記</a>  </p>
<p>「Select Components」ではすべてのチェックを外した。<br>「Adjusting your PATH environment」は上から2番目の「Run Git from the Windows Command Prompt」。<br>「Configuring the line ending conversions」は上から2番目の「Checkout as-is, commit Unix-style line endings」でインストールした。<br>だが、実際Hexoでdeployする際、  </p>
<pre><code>warning: LF will be replaced by CRLF in css/style.css.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-buttons.css.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-buttons.js.
The file will have its original line endings in your working directory.
...
</code></pre><p>と、改行コードが変更されるという警告が大量に表示されたので、結局上から3番目のオプション「Checkout as-is, commit as-is」（autocrlf = false）にした。<br>後から<code>C:\Users\（ユーザー名）\.gitconfig</code>で変更可能。  </p>
<h3 id="Hexoのインストール">Hexoのインストール</h3>
<p>コマンドプロンプトを開き、</p>
<pre><code>&gt;npm install hexo -g
</code></pre><p>でインストール。</p>
<p>Linuxの時と同様、  </p>
<pre><code>npm WARN optional dep failed, continuing fsevents@0.2.0
</code></pre><p>という警告が出たが、インストール完了。  </p>
<p>Hexoの作業フォルダを作るため、任意のフォルダを選択した状態で「SHIFT」キーを押しながら右クリック。<br>「コマンド ウィンドウをここで開く」でコマンドウィンドウを立ち上げ、  </p>
<pre><code>&gt;hexo init hexo-win
&gt;cd hexo-win
&gt;npm install

&gt;hexo g
&gt;hexo s
</code></pre><p>ローカルホストに無事、新規ブログが立ち上がった。  </p>
<p>2回目の<code>hexo g</code>からは、なぜか  </p>
<pre><code>[delete] Deleted: archives\2014\11\index.html
[delete] Deleted: archives\index.html
...

[create] Generated: archives/index.html (124ms)
[create] Generated: archives/2014/index.html (63ms)
...
</code></pre><p>と、一旦すべてのファイルを削除してからまたファイルを生成したというメッセージが表示される。<br>あまり気持ち良くはないが、実用上問題は無さそう。  </p>
<p>この後deployで少し躓いてしまったが、WindowsでHexoを使うことが出来た。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>以前、静的サイトジェネレーターnanocをWindowsにインストールしたが、なんとかインストールは出来たものの、compile（generate）してhtmlファイルを生成する際、エラーになり使えなかった。<br>最近使い始めたHexoは、nanocやOctopressと]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexoの新規記事テンプレートを変更]]></title>
    <link href="http://pagent.github.io/2014/11/23/hexo-post-template/"/>
    <id>http://pagent.github.io/2014/11/23/hexo-post-template/</id>
    <published>2014-11-22T23:20:38.000Z</published>
    <updated>2014-11-29T04:10:12.000Z</updated>
    <content type="html"><![CDATA[<p>Hexoで新規記事を作ると、初期状態ではtitle、date、tagsの項目しか無いが、categoriesも使いたいので変更。<br>/scaffolds/post.mdに項目を追加するだけで出来た。<br>（<code>---</code>で区画された部分は「Front Matter」と言うらしい。）  </p>
<p>またOctopressに戻ることもあるかもしれないので、Octopressの書式に倣ってlayout、commentsも加えた。  </p>
<pre><code>---
layout: post
title: ｛｛ title ｝｝      ## ｛｛  ｝｝は実際には半角英数
date: ｛｛ date ｝｝
comments: true
tags: 
categories: 
---
</code></pre><p><code>hexo n test</code>すると下記内容のファイルが生成された。  </p>
<pre><code>layout: post
title: test
comments: true
date: 2014-11-23 09:15:51
tags:
categories:
---
</code></pre><p>Octopressでは<code>comments: true</code>が無いとDisqusが表示されない。<br>Hexoではcommentsの項目が無くてもDisqusは表示されるが、<code>comments: false</code>にするとその記事だけDisqusの表示は消える。<br>記事によってコメント禁止にする時に便利かもしれない。  </p>
<p>/scaffolds/post.mdで上部にも<code>---</code>を加えたが、生成ファイルでは下部にしか<code>---</code>が無い。<br>これだとOctopressでは記事をちゃんとgenerate出来ないようだが、上部に<code>---</code>を付ける方法が分からない。<br>もしまたOctopressに戻ることがあったら、手作業するしかなさそうだ。  </p>
<p>ーー<br>（追記）<br>Hexoの/source/_posts内の記事ソースをOctopress形式のFront Matterに変換出力するスクリプトが公開されていた。<br><a href="https://github.com/ciffel/Hexo-to-Octopress-Converter" target="_blank" rel="external">ciffel/Hexo-to-Octopress-Converter</a>  </p>
<p>これを使うと上部の<code>---</code>、<code>layout: post</code>そして<code>comments: true</code>を付加してくれる。<br>さらにHexoの<code>tags:</code>が<code>categories:</code>にリネームされる。<br>（Hexoの<code>tags:</code>はOctopressの<code>categories:</code>に相当するようだ。）  </p>
<p>なので/scaffolds/post.mdは元の記載に戻した。  </p>
<pre><code>title: Hexoの新規記事テンプレートを変更
date: Sun Nov 23 2014 08:20:38 GMT+0900 (JST)
tags:
---
</code></pre><p>OctopressからHexoへの移行には下記プラグインが対応していて、これを使うとOctopressのソースの<code>categories:</code>が<code>tags:</code>に変換される。<br><a href="https://github.com/sailxjx/hexo-migrator-octopress" target="_blank" rel="external">hexo-migrator-octopress</a>  </p>
<p>骨折り損だったが、Hexoでコメント禁止にしたい時は<code>comments: false</code>を加えれば良いというのが分かったのが収穫だった。<br>早めに気がついて良かった。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexoで新規記事を作ると、初期状態ではtitle、date、tagsの項目しか無いが、categoriesも使いたいので変更。<br>/scaffolds/post.mdに項目を追加するだけで出来た。<br>（<code>---</code>で区画された部分は「Front]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexoのアーカイブ、カテゴリーページを全文表示からリスト表示に]]></title>
    <link href="http://pagent.github.io/2014/11/23/hexo-archve-category/"/>
    <id>http://pagent.github.io/2014/11/23/hexo-archve-category/</id>
    <published>2014-11-22T22:54:43.000Z</published>
    <updated>2014-11-29T04:10:03.000Z</updated>
    <content type="html"><![CDATA[<p>HexoのArchivesや各カテゴリーのページはデフォルトでは記事全文を表示するようになっている。<br>リスト表示の方が一覧を俯瞰出来て便利なので好みなのだが、カスタマイズの仕方がなかなか分からなかった。  </p>
<p>結局は_config.ymlのArchivesの項目で  </p>
<pre><code># Archives
## 2: Enable pagination
## 1: Disable pagination
## 0: Fully Disable
archive: 2
category: 2
tag: 2
</code></pre><p>となっているところの値を、2から1に変更。  </p>
<pre><code># Archives
## 2: Enable pagination
## 1: Disable pagination
## 0: Fully Disable
archive: 1
category: 1
tag: 1
</code></pre><p>簡単にリスト表示（タイル形式）になった。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>HexoのArchivesや各カテゴリーのページはデフォルトでは記事全文を表示するようになっている。<br>リスト表示の方が一覧を俯瞰出来て便利なので好みなのだが、カスタマイズの仕方がなかなか分からなかった。  </p>
<p>結局は_config.ymlのArchives]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexoのテーマを変更したら、元に戻せなくなった]]></title>
    <link href="http://pagent.github.io/2014/11/22/hexo-theme/"/>
    <id>http://pagent.github.io/2014/11/22/hexo-theme/</id>
    <published>2014-11-22T12:22:39.000Z</published>
    <updated>2014-11-29T04:09:39.000Z</updated>
    <content type="html"><![CDATA[<p>Hexoにはいろいろテーマがあるようで有難い。<br><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">Themes · hexojs/hexo Wiki</a><br>（デモサイトはなぜか中国語が多い。）</p>
<p>元々入っていたデフォルトのテーマは「Landscape」だったので、とりあえずそれとは別のOfficial Themes、「Phase」と「Light」を試してみた。<br>試したはいいが、「Light」を入れてから元のテーマに戻そうとしたら戻せなくなってしまった。<br>「Light」が崩れたようなスタイルから変更出来ない。  </p>
<p><code>hexo h</code>でヘルプを見ると、<code>clean</code>（Remove generated files and the cache）というコマンドオプションがあったので、<code>hexo clean</code>をしてみた。<br>書いてある通り/publicフォルダ自体も消えてしまったが、その後<code>hexo g</code>したらテーマも無事直った。  </p>
<p>消したのに、カウント数が(0)のまま表示されているカテゴリやタグも、<code>hexo clean</code>で直るようだ。  </p>
<p>ーー<br>テーマのCSSをカスタマイズする際にも、ローカルでの確認では問題ないが、いざdeployすると反映されていないようだ。<br>この時もいったん<code>hexo clean</code>すると良いようだ。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexoにはいろいろテーマがあるようで有難い。<br><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">Themes · hexojs/hexo Wiki<]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[サイトジェネレーターをOctopressからHexoに変更]]></title>
    <link href="http://pagent.github.io/2014/11/22/octopress-hexo/"/>
    <id>http://pagent.github.io/2014/11/22/octopress-hexo/</id>
    <published>2014-11-22T11:21:26.000Z</published>
    <updated>2014-11-29T04:09:47.000Z</updated>
    <content type="html"><![CDATA[<p>Github Pagesのブログに使っている静的サイトジェネレーターをOctopressからHexoに変更してみた。  </p>
<p>Octopressの/source/_posts内の記事ソースをそのままHexoの/source/_postsにコピーしたら、generateした時にパーマリンクが<code>http://.../2014/10/24/2014-10-24-xubuntu-blank-menu/</code>のように日付けが重複してしまった。<br>Hexoはデフォルトでは、新しく記事を作った時には日付けがつかず、生成する時に日付けを付加するようになっているらしい。  </p>
<p>_config.ymlの  </p>
<pre><code># Writing
new_post_name: :title.md # File name of new posts
</code></pre><p>のところを  </p>
<pre><code>new_post_name: :year-:month-:day-:title.md
</code></pre><p>に変更したら良いようだ。<br><a href="http://hexo.io/docs/migration.html" target="_blank" rel="external">Migration | Hexo</a>  </p>
<p>Octopressでは記事が/blogディレクトリ下に配置されるパーマリンクを使っていたが、今後はHexoのデフォルトの通りルート下に:year/:month/:day/:title/というパーマリンクを使うことにした。この方がシンプルで好みだし。<br>Githubでは.htaccessファイルを使ったリダイレクトが使用不可のようなので、以前の記事がリンク切れになるのは仕方がない。  </p>
<p>あと、下記記事を参考に、FeedとSitemapのプラグインを入れた。<br>プラグインの導入はとても簡単だった。<br><a href="http://liginc.co.jp/web/programming/server/104594" target="_blank" rel="external">所要時間3分!? Github PagesとHEXOで爆速ブログ構築してみよう！ | 株式会社LIG</a>  </p>
<p>Feedを導入すると、ヘッダー右上のアイコンでatom.xmlのページは表示出来たが、ブラウザのアドレスバーの端にフィードアイコンが表示されていない。  </p>
<p>themes/landscape/layout/_partial/head.ejsの26行目、<code>link rel=&quot;alternative&quot;</code>を<code>link rel=&quot;alternate&quot;</code>に変更したら、アドレスバーにフィードアイコンが表示された。  </p>
<p>心配だったGithubへのdeployも、_config.ymlの<code># Deployment</code>の項目に記載するだけですんなりdeploy出来た。  </p>
<p>記事数が増えるに従い（増えたといっても、ほんの20数記事だが）、動作がもっさりして来たOctopressに較べ、generateが断然早くて軽快。<br>コマンドも<br><code>hexo generate</code>→<code>hexo g</code><br><code>hexo server</code>→<code>hexo s</code><br><code>hexo deploy</code>→<code>hexo d</code><br>で良いようだし、なかなか便利。  </p>
<p>ーー<br><code>hexo new</code>も<code>hexo n</code>でいいみたいで、<code>hexo deploy -g</code>は<code>hexo d -g</code>で良いようだ。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Github Pagesのブログに使っている静的サイトジェネレーターをOctopressからHexoに変更してみた。  </p>
<p>Octopressの/source/_posts内の記事ソースをそのままHexoの/source/_postsにコピーしたら、genera]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Xubuntuに静的サイトジェネレーターHexoを入れてみた]]></title>
    <link href="http://pagent.github.io/2014/11/21/hexo-xubuntu/"/>
    <id>http://pagent.github.io/2014/11/21/hexo-xubuntu/</id>
    <published>2014-11-21T04:56:19.000Z</published>
    <updated>2014-11-29T04:09:25.000Z</updated>
    <content type="html"><![CDATA[<p>Octopressでブログを書いていて、さして不満はないのだが、別の静的サイトジェネレーターに「Hexo」というのがあるのを知った。<br>Octopressに較べ、テーマも豊富に用意あり、日本語のURLやカテゴリー名にも対応しているようだったので、入れてみた。<br>rubyではなく、Node.jsというのを使うらしい。  </p>
<p>導入には下記サイトなどを参考にさせて頂いた。<br><a href="http://tech.admax.ninja/2014/09/11/environment-of-hexo/" target="_blank" rel="external">【Node.js】Hexoでブログを書くための環境構築 | AdMax Tech Blog</a>  </p>
<p>概ね上記サイトの通りに進めたらいいようだったが、Xubuntu14.04の環境では若干うまく行かないところがあった。  </p>
<p>nodeにパスを通す際、~/.bash_profileというファイルが見つからなかったので、~/.profileに  </p>
<pre><code>if [[ -s ~/.nvm/nvm.sh ]];
then source ~/.nvm/nvm.sh
fi
</code></pre><p>を追記したが、これでは駄目なようで、ターミナルを起動する度にnvmというコマンドが見つからないと言われる。  </p>
<p>どうやら~/.bashrcに追記しないと駄目なようだった。<br><a href="http://d.hatena.ne.jp/white_chi/20111101/1320097898" target="_blank" rel="external">Ubuntu11.10で、nvmからnode.jsをインストールする - ホワイトぼーど</a>  </p>
<p>Hexoをインストールするところで  </p>
<pre><code>npm WARN optional dep failed, continuing fsevents@0.2.0
</code></pre><p>と言われたが、問題なく使えるようだ。<br>途中うまく行かないので、下記サイトを参考に  </p>
<pre><code>curl -sL https://deb.nodesource.com/setup | sudo bash -

sudo apt-get install -y nodejs
</code></pre><p>とやったりしたが、果たしてこれが必要な操作だったのかどうかは不明。<br><a href="https://github.com/joyent/node/wiki/installing-node.js-via-package-manager" target="_blank" rel="external">Installing Node.js via package manager · joyent/node Wiki</a>  </p>
<p>しばらく試用してみて良ささそうだったら、Octopressから乗り換えるかもしれない。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Octopressでブログを書いていて、さして不満はないのだが、別の静的サイトジェネレーターに「Hexo」というのがあるのを知った。<br>Octopressに較べ、テーマも豊富に用意あり、日本語のURLやカテゴリー名にも対応しているようだったので、入れてみた。<br>ru]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2台目のPCのOctopressでdeploy出来ない]]></title>
    <link href="http://pagent.github.io/2014/11/20/octopress-deploy-rejected/"/>
    <id>http://pagent.github.io/2014/11/20/octopress-deploy-rejected/</id>
    <published>2014-11-20T10:11:54.000Z</published>
    <updated>2014-11-29T04:08:56.000Z</updated>
    <content type="html"><![CDATA[<p>DropboxでOctopressのフォルダを同期し、2台目のPCでもrake new_postやrake generateは出来るようになったが、rake deployが出来ない。<br>gitが入ってなかったので<code>sudo apt-get install git</code>し、<code>rake setup_github_pages</code>でセットアップしたが、  </p>
<pre><code>! [rejected]        master -&gt; master (non-fast-forward)
</code></pre><p>とエラーになる。<br>SSHの公開鍵も設定したのだが。  </p>
<p>検索したところ、Octopressで突然deploy出来なくなった時には、Rakefileを編集するという対処法があるらしい。<br><a href="http://qiita.com/takuma7/items/2d6f6e786eb6c0afbefb" target="_blank" rel="external">Octopressでrake deployした際にrejectedされた場合の対処 - Qiita</a>  </p>
<p>どうやら強制的にdeployするものらしい。  </p>
<p>上記記事の通り、Rakefileの268行目の<code>#</code>の前に<code>+</code>を付けて  </p>
<pre><code>Bundler.with_clean_env { system &quot;git push origin +#{deploy_branch}&quot; }
</code></pre><p>にすると、deploy出来た。  </p>
<p>元記事によると、deploy出来るようになった後は、Rakefileの編集を元に戻しておいた方がいいらしい。<br><a href="http://stackoverflow.com/questions/17609453/rake-gen-deploy-rejected-in-octopress" target="_blank" rel="external">rake gen_deploy rejected in Octopress - Stack Overflow</a>  </p>
<p>いったんdeploy出来るようになったら、その後はRakefileを元に戻してもdeploy出来る。  </p>
<p>記事ではoctopress/_deployディレクトリで<code>git pull origin master</code>というコマンドを使う回答もあった。<br>機会があれば今度試してみようと思う。  </p>
<p>gitがなんなのかよく分からないが、FTPでアップロードしていた時に較べるとブログの更新も楽だし、スマートな感じがする。<br>でもほんと、gitってよく分からない。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>DropboxでOctopressのフォルダを同期し、2台目のPCでもrake new_postやrake generateは出来るようになったが、rake deployが出来ない。<br>gitが入ってなかったので<code>sudo apt-get install gi]]>
    </summary>
    
      <category term="Octopress" scheme="http://pagent.github.io/tags/Octopress/"/>
    
      <category term="Git" scheme="http://pagent.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Installing libv8で止まる]]></title>
    <link href="http://pagent.github.io/2014/11/19/install-libv8/"/>
    <id>http://pagent.github.io/2014/11/19/install-libv8/</id>
    <published>2014-11-19T09:02:45.000Z</published>
    <updated>2014-11-29T04:08:30.000Z</updated>
    <content type="html"><![CDATA[<p>OctopressのフォルダをDropboxに置くことにしたので、メインで使っているPCではなく古いネットブックにインストールしたXubuntuからDropbox上のOctopressを使えるかどうか試してみた。<br>だがrake previewしようとしたら、エラーになってしまった。<br>Octopressを使う環境が整っていないので当然といえば当然。  </p>
<p>環境を整えるにあたり、bundle installで行き詰まってしまった。<br>途中    </p>
<pre><code>Installing libv8 (3.16.14.7) 
</code></pre><p>の表示のところで動かない。<br>フリーズしたのかと思ったが検索したところ、libv8のインストールには時間が掛かるらしい。<br>確かにCPUの使用率も100%で、頑張ってはいるようだ。  </p>
<p>非力なマシンのせいか結局30分くらい掛かったろうか。<br>もう一度パスワード入力を求められ、その後またtherubyracer (0.12.1)のところで少し時間が掛かったが、ようやくYour bundle is complete!<br>Octopressを使えるようになった。  </p>
<p>ーー<br>使えるようになったと思ったら、deployが出来ない。  </p>
<pre><code>$ rake deploy
cp -r source/images/.gitkeeper public/images/.gitkeeper
## Deploying branch to Github Pages 
## Pulling any updates from Github Pages 
cd _deploy
cd -
rm -rf _deploy/assets
rm -rf _deploy/atom.xml
rm -rf _deploy/blog
rm -rf _deploy/favicon.png
rm -rf _deploy/images
rm -rf _deploy/index.html
rm -rf _deploy/javascripts
rm -rf _deploy/posts
rm -rf _deploy/robots.txt
rm -rf _deploy/sitemap.xml
rm -rf _deploy/stylesheets

## Copying public to _deploy
cp -r public/. _deploy
cd _deploy

## Committing: Site updated at 2014-11-19 11:02:25 UTC
sh: 1: git: not found

## Pushing generated _deploy website

## Github Pages deploy complete
cd -
</code></pre><p>拒否はされてないみたいだが、記事を投稿出来ない。<br>どこに問題があるのか、よく分からない。<br>generateもやたら遅いし、ちょっとしんどいかな。  </p>
<p>ーー<br>gitがインストールされてない？</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>OctopressのフォルダをDropboxに置くことにしたので、メインで使っているPCではなく古いネットブックにインストールしたXubuntuからDropbox上のOctopressを使えるかどうか試してみた。<br>だがrake previewしようとしたら、エラーにな]]>
    </summary>
    
      <category term="Octopress" scheme="http://pagent.github.io/tags/Octopress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Debian WheezyにNemoをインストール]]></title>
    <link href="http://pagent.github.io/2014/11/18/debian-wheezy-nemo/"/>
    <id>http://pagent.github.io/2014/11/18/debian-wheezy-nemo/</id>
    <published>2014-11-18T00:51:22.000Z</published>
    <updated>2014-11-27T06:40:26.000Z</updated>
    <content type="html"><![CDATA[<p>ネットブックLaVie LightにDebian Wheezyをインストールした。<br>ウィンドウマネージャはXfceが好みなので、debian-7.7.0-i386-netinst.isoでインストールする際、”Advanced options” 、”Alternate desktop environments”でXfceを選択した。  </p>
<p>ファイルやフォルダを簡単に管理者権限で操作したいので、XfceデフォルトのファイルマネージャーThunarのアクションに「rootで開く」を追加し、gksuもインストールした。<br>だがrootで開こうとしても、認証画面は表示されるものの、フォルダやファイルを管理者権限で開くことが出来ない。  </p>
<p>代わりにNemoをインストールしようとしたら、レポジトリにNemoが無かった。PCManFMも確かrootで開くメニューがあったのでインストールしてみたが、なぜかrootで開くメニューが無い。<br>困ってしまったが、Ubuntu 12.04 Preciseのレポジトリを追加することで、Nemoをインストール出来た。  </p>
<pre><code>echo &quot;deb http://ppa.launchpad.net/noobslab/mint/ubuntu precise main&quot; | sudo tee -a /etc/apt/sources.list  
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F59EAE4D  
sudo apt-get update  
sudo apt-get install nemo  
</code></pre><p><a href="http://www.techlw.com/2013/12/install-nemo-file-manager-with.html" target="_blank" rel="external">Install Nemo file Manager with Extensions in Debian 7 Wheezy and its derivatives | Technology Linux World</a>  </p>
<p>Ubuntu 14.04 Trustyのレポジトリを入れた方が、Nemoのバージョンが新しくて良いかと思いやってみたが、「壊れたパッケージを修復出来ない」とかでNemoをインストール出来なかった。  </p>
<p>それと、Nemoを起動すると、デスクトップ上の右クリックでアプリケーションメニューを表示するのが出来なくなってしまう。<br>これでは少々不便なので、普段はThunarを使った方が良いかもしれない。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ネットブックLaVie LightにDebian Wheezyをインストールした。<br>ウィンドウマネージャはXfceが好みなので、debian-7.7.0-i386-netinst.isoでインストールする際、”Advanced options” 、”Alternate]]>
    </summary>
    
      <category term="Linux" scheme="http://pagent.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Xubuntu 14.04.1で無線LAN(Atheros AR9285)が安定しない]]></title>
    <link href="http://pagent.github.io/2014/11/13/xubuntu-ar9285/"/>
    <id>http://pagent.github.io/2014/11/13/xubuntu-ar9285/</id>
    <published>2014-11-13T08:33:12.000Z</published>
    <updated>2014-11-27T06:40:26.000Z</updated>
    <content type="html"><![CDATA[<p>Xubuntu 14.04.1をインストールしたネットブックLaVie Light BL300/T。<br>有線でのネット接続は問題無いが、無線LANがとても不安定。<br>頻回に接続が切れて認証を要求されるし、接続も異様に遅い。<br>Xubuntu 12.04では問題なく使えていたのだが。  </p>
<p>どうも無線LANアダプターAtheros製AR9285とドライバーath9kの相性の問題もあるらしい。<br><a href="http://blog.livedoor.jp/furikku9310/archives/52298627.html" target="_blank" rel="external">ノートPCの無線LANデバイスにて : フレイドフォートonBlog</a>  </p>
<p>/etc/modprobe.d内にath9k.confというファイルを作りそこに<code>options ath9k nohwcrypt=1</code>と記載したり、ath9kをロードし直したりしてみたが改善しない。<br>NdisWrapperでWindows Xp用のドライバーを使えば良いかと思いやってみたが、これも満足に動作しない。  </p>
<p>Xubuntu 14.04.1にLinux 3.2や3.8カーネルをコンパイルしてインストールすれば良いのかもしれないが、自分の力量を超えているので断念。<br>（カーネルのコンパイルをしなくても、Ubuntu 12.04 Preciseのレポジトリを追加してLinux 3.2カーネルをインストールすれば良かったのかもしれない。<a href="/2014/11/18/debian-wheezy-nemo/">Debian WheezyにNemoをインストール</a>）  </p>
<p>結局Xubuntu 12.04をインストールしそれを14.04.1にアップグレード、起動カーネルをLinux 3.2にすることで無線LANも安定した。  </p>
<pre><code>GRUB_DEFAULT=&quot;Advanced options for Ubuntu&gt;Ubuntu, with Linux 3.2.0-58-generic&quot;
</code></pre><p>古いPCでもLinuxは利用出来ると言われるが、Linuxも新しい機器への対応を進める一方、古いPCは切り捨てられていくのだろうか。<br>使い勝手はUbuntu派生ディストリに劣るかもしれないが、今度Debian+Xfceも試してみようと思う。  </p>
<p>ーー<br>（追記）<br>lshwコマンドで見たところ、Xubuntu 12.04（Linux 3.2カーネル）でもAR9285に使われているドライバーはath9kだった。<br>なぜXubuntu 14.04.1の場合は無線が安定しないのだろう？<br>「disabling IRQ #9」回避のため、起動オプションに「pci=noacpi」を付けていたからだろうか。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Xubuntu 14.04.1をインストールしたネットブックLaVie Light BL300/T。<br>有線でのネット接続は問題無いが、無線LANがとても不安定。<br>頻回に接続が切れて認証を要求されるし、接続も異様に遅い。<br>Xubuntu 12.04では問題な]]>
    </summary>
    
      <category term="Linux" scheme="http://pagent.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[起動オプションを付けてXubuntu14.04.1をインストール]]></title>
    <link href="http://pagent.github.io/2014/11/11/xubuntu-install-option/"/>
    <id>http://pagent.github.io/2014/11/11/xubuntu-install-option/</id>
    <published>2014-11-11T09:39:48.000Z</published>
    <updated>2014-11-27T06:40:26.000Z</updated>
    <content type="html"><![CDATA[<p>NECのネットブックLaVie Light BL300/TにXubuntu14.04.1を再インストールした。<br>以前もXubuntu14.04.1をインストールしたがその時は<code>disabling IRQ #9</code>でインストールDVDを起動出来ず、いったんXubuntu13.04をインストールしてから、その後Xubuntu14.04.1にアップグレードしていた。<br>だが、起動オプションに<code>pci=noacpi</code>を加えれば、Linuxカーネル3.13.0-39でも起動出来るようだったので、起動オプションを付けてXubuntu14.04.1をインストールした。  </p>
<p>Xubuntu14.04.1のインストールDVDを入れ、起動後「shift」キーを押し続けてオプションを表示。言語を日本語にした後「F6」キーで「その他のオプション」を表示。<br><code>acpi=off</code>、<code>noapic</code>、<code>nolapic</code>、<code>edd=on</code>、<code>nodmraid</code>、<code>nomodeset</code>等の起動オプションが選択出来るが、なにも選ばず「ESC」キーで選択画面を終了。（<code>acpi=off</code>では解像度が800×600に固定されてしまい、他のオプションでは<code>disabling IRQ #9</code>でインストールDVDを起動出来ない。）<br>下部に「起動オプション」の欄があり、キーボードで任意にオプションを入力出来るので、<code>quiet splash --</code>に続けて<code>pci=noacpi</code>と入力し「ENTER」で起動。<br>問題なくXubuntu14.04.1をインストール出来た。  </p>
<p>インストール後再起動すると、/etc/default/grubの</p>
<pre><code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;
</code></pre><p>の下にちゃんと</p>
<pre><code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;pci=noacpi&quot;
</code></pre><p>の記載が加わっている。</p>
<p>Xubuntuの前にLubuntu14.04.1も試してみたが、確かにXubuntuに較べて動作はやや軽いような気はした。<br>だがLubuntuソフトウェアセンターというのが検索も出来ず使いづらいし、お気に入りアプリケーションの登録も不便だったりと、カスタマイズの自由度の低さからLubuntuは断念した。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>NECのネットブックLaVie Light BL300/TにXubuntu14.04.1を再インストールした。<br>以前もXubuntu14.04.1をインストールしたがその時は<code>disabling IRQ #9</code>でインストールDVDを起動出来ず、い]]>
    </summary>
    
      <category term="Linux" scheme="http://pagent.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
