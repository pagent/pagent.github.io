<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Pagent]]></title>
  <subtitle><![CDATA[静的サイトジェネレーターとGitレポジトリでブログ]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://pagent.github.io/"/>
  <updated>2014-12-05T20:27:05.270Z</updated>
  <id>http://pagent.github.io/</id>
  
  <author>
    <name><![CDATA[Pagent]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[枯れ葉]]></title>
    <link href="http://pagent.github.io/2014/12/05/kareha/"/>
    <id>http://pagent.github.io/2014/12/05/kareha/</id>
    <published>2014-12-05T09:59:21.000Z</published>
    <updated>2014-12-05T20:26:40.000Z</updated>
    <content type="html"><![CDATA[<p>からからとアスファルトの上枯れ葉転がり</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>からからとアスファルトの上枯れ葉転がり</p>
]]>
    </summary>
    
      <category term="短歌・俳句等" scheme="http://pagent.github.io/tags/%E7%9F%AD%E6%AD%8C%E3%83%BB%E4%BF%B3%E5%8F%A5%E7%AD%89/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HexoとOctopressの比較]]></title>
    <link href="http://pagent.github.io/2014/12/05/hexo-vs-octopress/"/>
    <id>http://pagent.github.io/2014/12/05/hexo-vs-octopress/</id>
    <published>2014-12-04T23:01:11.000Z</published>
    <updated>2014-12-05T09:33:21.000Z</updated>
    <content type="html"><![CDATA[<p>どちらもブログとしての体裁が整っていて、導入したらすぐ始められるHexoとOctopress。<br>しばらくHexoを使ってみて、Octopressと比較しての感想。（あくまで私見）  </p>
<h3 id="長所">長所</h3>
<h4 id="・generateが早い">・generateが早い</h4>
<p>Hexoの長所はなんと言ってもこれだろう。<br>手動での計測だが、30程の記事をgenerateするのに要した時間は、Octopressの12.5秒に対してHexoは2.3秒と、5分の1以下だった。<br>今後、記事数や使っているタグ、カテゴリーが増えれば、さらに差が広がると思われる。<br>プレビュー時の反映も早い。  </p>
<h4 id="・デフォルトで日本語のタグ名（カテゴリー名）を使える">・デフォルトで日本語のタグ名（カテゴリー名）を使える</h4>
<p>Octopressでもカスタマイズすれば日本語のカテゴリー名を使えるようだが、デフォルト状態では漢字は中国語読みらしきローマ字表記に変換される。（たとえば、”未分類”は”wei-fen-lei”に。）<br>仮名はローマ字表記になるが、”の”は”false”に。「の（no）」をyes、noの”no”と判断する様。  </p>
<h4 id="・Windowsで使える">・Windowsで使える</h4>
<p>あくまで自分の環境でだが、Octopressが使っているRubyはWindowsで正常に動作しなかった。<br>一方、Hexo（JavaScript使用）はWindowsで使用可能だった。<br>WindowsにJekyllをインストールする方法も紹介されているので、環境によってはOctopressもWindows上で使えるのかもしれない。  </p>
<h4 id="・コマンドが簡単">・コマンドが簡単</h4>
<p><code>hexo new</code>→<code>hexo n</code>、<code>hexo generate</code>→<code>hexo g</code>、<code>hexo server</code>→<code>hexo s</code>、<code>hexo deploy</code>→<code>hexo d</code>の省略でコマンド可能。<br>辞書登録すればあまり関係ないが。  </p>
<h3 id="短所">短所</h3>
<h4 id="・中国製？">・中国製？</h4>
<p>使わせてもらっている身だが、なんかおもしろくない。  </p>
<h4 id="・FrontMatterの書式がOctopressと違う">・FrontMatterの書式がOctopressと違う</h4>
<p>他の静的サイトジェネレーターでもFrontMatter上部には<code>---</code>が入るのが一般的のよう。<br>この先、他の静的サイトジェネレーターに移行する可能性も考えると、ここは合わせて欲しかった。  </p>
<h4 id="・ユーザー数が少ない">・ユーザー数が少ない</h4>
<p><a href="https://staticsitegenerators.net/" target="_blank" rel="external">Static Site Generators</a>のStars（「いいね」みたいなもののよう）は、現時点（2014年12月5日）では、Octopressの8522に対しHexoは3430とOctopressの半分以下。<br>（1位はOctopressの本家Jekyllが17578と圧倒的）<br>何か調べたい時にも、特に日本語では、参考になるドキュメントは少なくなる。<br>Octopressより後発なので、今後増える可能性はある。  </p>
<h4 id="・コマンドがかっこ悪い">・コマンドがかっこ悪い</h4>
<p>ことある毎に<code>hexo</code>と連呼しないといけないのが、ちょっとかっこ悪い。  </p>
<h3 id="引き分け">引き分け</h3>
<h4 id="・テーマの豊富さ">・テーマの豊富さ</h4>
<p>自分の知る限りでは大差はない。<br>テーマの変更や微修正の容易さでは、Hexoに分があるよう。  </p>
<h4 id="・SEO">・SEO</h4>
<p>あまり違いは無さそう。<br>使っているテーマにもよるだろうし、記事の内容次第か。  </p>
<h4 id="・カテゴリーとタグのあつかい">・カテゴリーとタグのあつかい</h4>
<p>Octopressの”categories”はHexoでは”tags”に相当する。<br>複数設定した際、階層ではなく並列になる点からすると、”tags”としてあつかうHexoの方が自然な気はする。  </p>
<h3 id="結論">結論</h3>
<p>Node.js（JavaScript）の早さは魅力的なので、今後プログラミング言語がRubyの静的サイトジェネレーターに積極的に移ろうという気はしない。<br>自分のスキルが上がってMetalsmithを使いこなせるようになるか、他に良さそうな静的サイトジェネレーターが出てこない限りは、今後もHexoを使うことになりそうだ。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>どちらもブログとしての体裁が整っていて、導入したらすぐ始められるHexoとOctopress。<br>しばらくHexoを使ってみて、Octopressと比較しての感想。（あくまで私見）  </p>
<h3 id="長所">長所</h3>
<h4 id="・generateが]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
      <category term="Octopress" scheme="http://pagent.github.io/tags/Octopress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gitで”non-fast-forward”]]></title>
    <link href="http://pagent.github.io/2014/12/04/git-non-fast-forward/"/>
    <id>http://pagent.github.io/2014/12/04/git-non-fast-forward/</id>
    <published>2014-12-04T12:47:25.000Z</published>
    <updated>2014-12-04T23:59:44.000Z</updated>
    <content type="html"><![CDATA[<p>HexoのソースをBitbucketにcommitしようとしたら、  </p>
<pre><code>Your branch and &#39;bitbucket/master&#39; have diverged,
and have 1 and 1 different commit each, respectively.
  (use &quot;git pull&quot; to merge the remote branch into yours)

nothing to commit, working directory clean
</code></pre><p>と警告が出た。  </p>
<p>かまわずpushしたら、”master -&gt; master (non-fast-forward)”といってrejectされた。   </p>
<p>“git pull”を使え、ということのようなのでやってみたが、次の画面でなにをすれば良いのか分からない。  </p>
<p>なにもせず「CTRL」+「X」で終了して、もう一度addから試してみようとしたら、  </p>
<pre><code>このブランチは &#39;bitbucket/master&#39; よりも2コミット進んでいます。
  (use &quot;git push&quot; to publish your local commits)
</code></pre><p>とのこと。<br>言われた通り”git push”したら、今度はpush出来た。<br>「non-fast-forward」というのも検索してみたが、読んでもなんのことだかさっぱり。</p>
<p>便利なんだが、Gitは本当によく分からない。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>HexoのソースをBitbucketにcommitしようとしたら、  </p>
<pre><code>Your branch and &#39;bitbucket/master&#39; have diverged,
and have 1 and 1 different c]]>
    </summary>
    
      <category term="Git" scheme="http://pagent.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bootstrapでページ内リンク先がナビゲーションバーに隠れる]]></title>
    <link href="http://pagent.github.io/2014/12/04/bootstrap-in-page-anchor-link/"/>
    <id>http://pagent.github.io/2014/12/04/bootstrap-in-page-anchor-link/</id>
    <published>2014-12-04T01:13:06.000Z</published>
    <updated>2014-12-04T01:52:48.000Z</updated>
    <content type="html"><![CDATA[<p>タグ一覧ページで、特定のタグをクリックしてページ内リンク先に移動すると、先頭部分がナビゲーションバーに隠れてしまっていた。  </p>
<p>検索すると下記記事が見つかった。</p>
<p><a href="http://blog.livedoor.jp/sonots/archives/28928405.html" target="_blank" rel="external">bootstrap の固定ナビゲーションとページ内アンカー問題 - sonots:blog</a>  </p>
<p>難しそうなのでナビゲーションバーを上部に固定（<code>navbar-fixed-top</code>）しているのをやめようかと思ったが、リンクされていたGithub上のissueを見るとCSSを使った対処法が紹介されていた。  </p>
<p><a href="https://github.com/twbs/bootstrap/issues/1768#issuecomment-46519033" target="_blank" rel="external">Navbar hides initial content when jumping to in-page anchor · Issue #1768 · twbs/bootstrap</a>  </p>
<p>その通りstyle.cssに追記すると、リンク先の先頭部分は表示されるようになったが、使っているナビゲーションバーの高さが狭いせいか、一つ前のタグの下の部分が少し表示されている。  </p>
<p>navbarのmin-heightに合わせて、75pxの箇所を50pxにしたら、ちょうど良い具合になった。  </p>
<pre><code>*[id]:before { 
  display: block; 
  content: &quot; &quot;; 
  margin-top: -50px; 
  height: 50px; 
  visibility: hidden; 
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>タグ一覧ページで、特定のタグをクリックしてページ内リンク先に移動すると、先頭部分がナビゲーションバーに隠れてしまっていた。  </p>
<p>検索すると下記記事が見つかった。</p>
<p><a href="http://blog.livedoor.jp/sonots/ar]]>
    </summary>
    
      <category term="Bootstrap" scheme="http://pagent.github.io/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexoで記事に画像を挿入する]]></title>
    <link href="http://pagent.github.io/2014/12/03/hexo-image/"/>
    <id>http://pagent.github.io/2014/12/03/hexo-image/</id>
    <published>2014-12-03T10:24:04.000Z</published>
    <updated>2014-12-03T11:58:07.000Z</updated>
    <content type="html"><![CDATA[<p>Hexoで画像を挿入する場合、画像を表示するためのタグはOctopressと同様で、  </p>
<pre><code>{(半角の%) img (class名) (画像へのパス) (幅) (高さ) (タイトル) %} 
</code></pre><p>例えば  </p>
<pre><code>{(半角の%) img /images/a0960_005150_r.jpg 480 360 コスモス %}  #class名は省略
</code></pre><p>で良いようだ。<br>代わりに下記のようなhtmlタグを使っても良い。  </p>
<pre><code>&lt;a href=&quot;/images/a0960_005150_r.jpg&quot; target=_blank&gt;&lt;img src=&quot;/images/a0960_005150_r.jpg&quot; alt=&quot;コスモス&quot; width=&quot;480&quot; height=&quot;360&quot;&gt;&lt;/a&gt;
</code></pre><p>OctopressではMarkdown式のタグだと、画像をクリックしたら原寸大で表示というのが出来なかったので、htmlタグの方が良いかと思ったが、Hexoの場合、Markdownタグで画像クリック→原寸大表示が出来るようだ。  </p>
<p>Hexoでは_config.ymlのWritingの箇所で<code>post_asset_folder</code>の値を<code>true</code>にするようを推奨している。<br><a href="http://hexo.io/docs/writing.html#Asset_Folder" target="_blank" rel="external">Writing | Hexo</a>  </p>
<p>説明通り<code>post_asset_folder: true</code>にして新規postを作ると、postフォルダ内に.mdファイルと同名のフォルダが作成される。<br>このフォルダに画像ファイルを入れよということらしい。<br>画像を多用する場合は整理に便利なのかもしれないが、ほとんど画像を使わない場合はかえって煩雑なので、source下にimagenなどのフォルダを作ってそこへ入れた方が便利そうだ。  </p>
<p>ーー<br>（追記）<br>テーマをFreewillにしたら画像が強制的に最大表示になってしまったので、freewill/source/css/style.cssのimgの箇所で<code>width: auto;</code>、<code>height: auto;</code>を削除した。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexoで画像を挿入する場合、画像を表示するためのタグはOctopressと同様で、  </p>
<pre><code>{(半角の%) img (class名) (画像へのパス) (幅) (高さ) (タイトル) %} 
</code></pre><p>例えば  </p>
<]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HexoのテーマFreewillに月別アーカイブ]]></title>
    <link href="http://pagent.github.io/2014/12/03/hexo-freewill-monthly-archives/"/>
    <id>http://pagent.github.io/2014/12/03/hexo-freewill-monthly-archives/</id>
    <published>2014-12-03T07:55:43.000Z</published>
    <updated>2014-12-03T09:55:53.000Z</updated>
    <content type="html"><![CDATA[<p>サイドバーの種類にもよるが、Gitレポジトリを使ったブログにサイドバーを付けると、新規記事をdeployする際に更新するファイルが増えてしまって良くないように思う。  </p>
<p>先日入れたテーマFreewillはその辺を考慮してか、ページネーションのページ等どうしても更新せざるを得ないページにはサイドバーを置き、個別記事のページではサイドバー領域に投稿日やタグなどを表示するよう工夫されている。<br>実際、新規記事をdeployしても、過去の記事はcommitされていないようだ。  </p>
<p>ところで、Freewillには月別アーカイブが無かったので、入れることにした。  </p>
<p>デフォルトテーマのLandscapeのarchive.ejsをそのままfreewill/layout/_widget内にコピペすると、西暦の後ろに投稿数が隙間無しにくっついていて、見栄えが良くない。  </p>
<p>archive.ejsを修正、  </p>
<pre><code>&lt;% if (site.posts.length){ %&gt;
    &lt;div class=&quot;widget&quot;&gt;
        &lt;h4&gt;&lt;%= __(&#39;Monthly Archives&#39;) %&gt;&lt;/h4&gt;
        &lt;ul class=&quot;archive-list inline list-unstyled&quot;&gt;
        &lt;%- list_archives() %&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;% } %&gt;
</code></pre><p>freewill/source/css/style.cssにもスタイルを加えた。  </p>
<pre><code>/* Monthly Archives
---------------------------- */

.archive-list ul {
  padding:0 3px;
  list-style-type: none;
  line-height: 20px;
}
.archive-list-count {
    color: #888;
}
.archive-list-count:before {
    content: &quot; (&quot;;
}
.archive-list-count:after {
    content: &quot;)&quot;;
}
</code></pre><p>ちゃんとした知識が無く、見よう見まねなので、あまり良い記述ではないと思うが、自分としては十分満足。  </p>
<p>ーー<br>（追記）<br>Githubのコミット歴をよく見てみたら、同じタグを使っている過去記事も更新されるようだ。<br>個別記事ページのタグの箇所にそのタグを使っている記事数が表示されているせいだろう。  </p>
<p>タグクラウドやタグ一覧ページは良いとして、個別記事ページのタグには記事数は無い方が良さそうだ。  </p>
<p>freewill/layout/_partial/post/tag.ejsの5行目から<code>&lt;span&gt;&#39; + tag.length  + &#39;&lt;/span&gt;</code>を削除して、タグ名だけにした。  </p>
<pre><code>tags.push(&#39;&lt;li&gt;&lt;a href=&quot;&#39; + config.root + tag.path + &#39;&quot;&gt;&#39; + tag.name + &#39;&lt;/a&gt;&lt;/li&gt;&#39;);
</code></pre><p>これで様子を見てみようと思う。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>サイドバーの種類にもよるが、Gitレポジトリを使ったブログにサイドバーを付けると、新規記事をdeployする際に更新するファイルが増えてしまって良くないように思う。  </p>
<p>先日入れたテーマFreewillはその辺を考慮してか、ページネーションのページ等どうしても]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexoの記事一覧ページにツイートボタン設置]]></title>
    <link href="http://pagent.github.io/2014/12/02/hexo-tweetbutton/"/>
    <id>http://pagent.github.io/2014/12/02/hexo-tweetbutton/</id>
    <published>2014-12-02T11:10:48.000Z</published>
    <updated>2014-12-03T12:19:29.000Z</updated>
    <content type="html"><![CDATA[<p>HexoのテーマをFreewill変えて、Disqusウィジェット内の「Share」にはTwitterのツイートボタンはあるが、それだと<code>http://disq.us/…</code>というDisqus経由の短縮URLになる様子。<br>普通のツイートボタンを設置したかったので、<a href="https://about.twitter.com/ja/resources/buttons" target="_blank" rel="external">Twitter公式のツイートボタン</a>を入れることにした。  </p>
<p>個別の記事への設置は、Twitterサイトで「ページのURLを使う」の設定で作成したコードを/layout/_partial/article.ejsの<code>&lt;%- item.content %&gt;</code>の下あたりに追記したら問題なく表示された。 　</p>
<p>だがそのコードをlayout/_partial/post/entry.ejsに挿入しても、トップページなどページネーションのページ（記事一覧のページ）では、ブログタイトルと一覧ページのURLにしかならない。<br>URLとツイート文を自分でカスタマイズする設定でコードを作成し、excerptリンクに倣って、それぞれ<code>&lt;%- config.root %&gt;&lt;%= item.path %&gt;</code>、<code>&lt;%= item.title %&gt;</code>で挿入しても、記事タイトルのみでURLを取得出来ない。  </p>
<p><del>試行錯誤の結果、ブログURLの箇所をパスではなく直接記載して、<code>http://…/&lt;%= item.path %&gt;</code>にしたら上手くいった。<br><code>&lt;%- config.root %&gt;</code>というパスがブログトップのURLを取得出来なかったようだが、理由は不明。<br>「Read More」（続きを読む）の部分では、ちゃんと変換されているが。</del>  </p>
<p>ーーーー<br>（<strong>追記</strong>）<br>個別記事URLへのパスは<code>&lt;%- item.permalink %&gt;</code>一つで良いようだ。<br>ーーーー  </p>
<p>記事を概要表示にしている時は「Read More」。全文表示にしている時はツイートボタンを表示することにして、read_moreの箇所を下記に変更した。  </p>
<pre><code>&lt;% if (item.excerpt &amp;&amp; index) { %&gt;
  &lt;a type=&quot;button&quot; href=&quot;&lt;%- config.root %&gt;&lt;%- item.path %&gt;#more&quot; class=&quot;btn btn-default more&quot;&gt;&lt;%= __(&#39;read_more&#39;) %&gt;&lt;/a&gt;
&lt;% } else { %&gt;
&lt;div class=&quot;tweet-button&quot;&gt;
  &lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-url=&quot;&lt;%- item.permalink %&gt;&quot; data-text=&quot;&lt;%= item.title %&gt;&quot;&gt;Tweet&lt;/a&gt;
  &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
&lt;/div&gt;
&lt;% } %&gt;
</code></pre><p>ツイートボタンに対しては、source/css/style.cssに下記を追記、  </p>
<pre><code>.tweet-button {
  padding: 8px 0;
}
</code></pre><p>位置を調整した。  </p>
<p>（参考にさせて頂いた記事）<br><a href="http://imaizu.me/program/twbtn-on-jekyll-post.html" target="_blank" rel="external">jekyllのブログで投稿一覧ページにtwitterのボタンを置く - Taught by Myself</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>HexoのテーマをFreewill変えて、Disqusウィジェット内の「Share」にはTwitterのツイートボタンはあるが、それだと<code>http://disq.us/…</code>というDisqus経由の短縮URLになる様子。<br>普通のツイートボタンを設置]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gitレポジトリにディレクトリを追加]]></title>
    <link href="http://pagent.github.io/2014/12/01/git-add-directory/"/>
    <id>http://pagent.github.io/2014/12/01/git-add-directory/</id>
    <published>2014-12-01T14:27:34.000Z</published>
    <updated>2014-12-02T02:22:03.000Z</updated>
    <content type="html"><![CDATA[<p>HexoのソースはBitbucketで管理しているが、Hexoのテーマを変えたところ、commit出来なくなった。  </p>
<pre><code>Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)

    modified:   themes/freewill (modified content, untracked content)

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre><p>と表示される。  </p>
<p>Bitbucketのソースを見ると、新しいテーマのディレクトリthemes/freewillは追加はされているが、クリックして開くことが出来ない。<br>何度かやり直してみたが、うまく行かない。  </p>
<p>ためしに適当なファイルを一つpushしたらどうかと、  </p>
<pre><code>$ git add themes/freewill/LICENSE
$ git commit -m &#39;修正&#39;
$ git push
</code></pre><p>とやったらLICENSEが追加され、freewillを開くことが出来た。<br>その後もう一度<code>git add .</code>し、commit、pushしたら、他のファイルやディレクトリも追加された。  </p>
<p>そう言えばレポジトリに初めてcommitした時も、一度contributors.txtというファイルをpushしてからでないとうまく行かなかった。<br>Gitというのはいきなりディレクトリ全体を追加するのは出来ない仕様なのかもしれない。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>HexoのソースはBitbucketで管理しているが、Hexoのテーマを変えたところ、commit出来なくなった。  </p>
<pre><code>Changes not staged for commit:
  (use &quot;git add &lt;file&g]]>
    </summary>
    
      <category term="Git" scheme="http://pagent.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HexoのテーマをBootstrap準拠のFreewillにした]]></title>
    <link href="http://pagent.github.io/2014/12/01/hexo-bootstrap/"/>
    <id>http://pagent.github.io/2014/12/01/hexo-bootstrap/</id>
    <published>2014-12-01T08:36:10.000Z</published>
    <updated>2014-12-04T01:13:36.000Z</updated>
    <content type="html"><![CDATA[<p>Hexoのテーマをデフォルトのものから、Bootstrap準拠の<a href="https://github.com/yieme/hexo-theme-freewill" target="_blank" rel="external">Freewill</a>にした。<br>BootstrapのテーマBootswatchというものを採用しているようで、外観を簡単に変更出来る。  </p>
<p>他のテーマ同様  </p>
<pre><code>git clone https://github.com/yieme/hexo-theme-freewill.git themes/freewill
</code></pre><p>でインストール。  </p>
<p>Freewillの_config.ymlで<code>bootswatch:</code>で種々のBootswatchテーマに変更出来る。<br>Bootswatchのナビゲーションバーには、テーマ毎に2種類のカラーバリエーションがあり、layout/_partial/navigation.ejsの2行目で<code>navbar-default</code>と<code>navbar-inverse</code>（逆の配色）のどちらかに切り替え可能。  </p>
<p>デフォルトの設定では画面をスクロールすると、ナビゲーションバーがフェードアウト、マウスを合わせるとフェードインする仕様になっていた。<br>出たり消えたりはかえって邪魔なので、source/js/main.jsの内容をすべて消去したらフェードアウトが無くなった。<br>navigation.ejs2行目の<code>navbar-fixed-top</code>を削除すると、スクロールとともにナビゲーションバーが上方に移動する。  </p>
<p>_config.ymlの表示不要な項目は先頭に<code>#</code>を付けてコメントアウト。  </p>
<p>テーマの変更でAtomフィードが表示されなくなってしまったが、freewill/_config.ymlの<code>rss: true</code>を<code>rss: atom.xml</code>に変更してナビゲーションバーに追加したら表示された。<br>layout/_partial/head.ejsのtheme.rssの箇所の<code>link rel=&quot;alternative&quot;</code>を<code>link rel=&quot;alternate&quot;</code>に変更。アドレスバーにもアイコンが表示された。  </p>
<p>Bootstrapのテーマらしく、すっきりしていて機能的な印象。  </p>
<p>ただ、paginationのページ上方にでかでかと表示されているJumbotronというのをどう使えばいいか分からない。<br>デフォルトではブログタイトルもしくはブログの説明が表示されるようだが。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexoのテーマをデフォルトのものから、Bootstrap準拠の<a href="https://github.com/yieme/hexo-theme-freewill" target="_blank" rel="external">Freewill</a>にした。<br]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
      <category term="Bootstrap" scheme="http://pagent.github.io/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gitレポジトリを利用したブログとサイドバー]]></title>
    <link href="http://pagent.github.io/2014/11/30/sidebar-git/"/>
    <id>http://pagent.github.io/2014/11/30/sidebar-git/</id>
    <published>2014-11-30T10:52:39.000Z</published>
    <updated>2014-11-30T11:51:24.000Z</updated>
    <content type="html"><![CDATA[<p>これまで、無料レンタルブログやWordPress、Octopressなどを使ったブログ含めて、ずっと右サイドバーの2コラムを好んで使って来た。  </p>
<p>ブログを始めた頃は今のように、サイドバーの無いブログはあまり見かけなかったし、サイドバーはあるのが当たり前と思っていた。<br>訪問者がサイドバーを見て他の記事も読んでくれるかもしれないし。  </p>
<p>普段使っているノートパソコンの右側にテンキーが付いていて、左に寄ってパソコンに向かうことになるので、記事が正面に来るよう、右サイドバーが都合が良かった。<br>両側サイドバーの3コラムは少しごちゃごちゃしている感じがして、好みではなかった。。  </p>
<p>スマホに合わせるといっても、レスポンシブルデザインならサイドバーが下に回ってくれるし、レンタルブログサービスではスマホ用のページも用意してくれている。<br>サイドバーの無いブログを見ても、正直なにが良いのかよく分からなかった。<br>だが、静的サイトジェネレーターで作ったブログをGithub Pagesにdeployするようになって、考えが変わって来た。  </p>
<p>サイドバーがあると、一つ記事を投稿しただけで、過去のすべての記事のサイドバーも変更される可能性がある。<br>「最近の記事」を表示している場合は当然そうだろうし、新たにタグやカテゴリーを追加した場合、それにカテゴリーや月別アーカイブの記事数が更新される場合も同様に違いない。<br>（JavaScriptを用いていたら大丈夫なのかもしれないが。）</p>
<p>これをdeployすると、すべての記事を更新することになってしまう。<br>これでは非効率だし、.deploy/.git/objectsの肥大化の原因にもなるはず。<br>サイドバーが下にある場合も同様だろう。</p>
<p>Github Pagesを使うなら、サイドバーは無い方が良さそうだ。<br>自分のことを思い返してみても、よほど興味のあるキーワードがある時以外は、サイドバーの項目をクリックすることはほとんど無いようだ。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>これまで、無料レンタルブログやWordPress、Octopressなどを使ったブログ含めて、ずっと右サイドバーの2コラムを好んで使って来た。  </p>
<p>ブログを始めた頃は今のように、サイドバーの無いブログはあまり見かけなかったし、サイドバーはあるのが当たり前と思っ]]>
    </summary>
    
      <category term="blog" scheme="http://pagent.github.io/tags/blog/"/>
    
      <category term="Git" scheme="http://pagent.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexoの固定ページを日付け無しに]]></title>
    <link href="http://pagent.github.io/2014/11/29/page-no-date/"/>
    <id>http://pagent.github.io/2014/11/29/page-no-date/</id>
    <published>2014-11-29T10:52:13.000Z</published>
    <updated>2014-11-29T11:38:09.000Z</updated>
    <content type="html"><![CDATA[<p>Hexoでは固定ページを作る際、コマンド<code>hexo new page （ページ名）</code>でsource/（ページ名）下にindex.mdが作成される。<br>tagsやcategoriesは使えないようになっている。<br>コメントを禁止にするには、Front Matterに<code>comments: false</code>を加えれば良い。  </p>
<p>固定ページでは日付けも表示したくないところだが、<code>date:</code>の項目を消してみるても、ファイルを更新した日付けが表示されてしまう。<br>themes/landscape/layout/page.ejsを見ると、post.ejsと同じ_partial/article.ejsがレイアウトとして使われていた。  </p>
<p>_partialディレクトリ下のarticle.ejsをarticle-page.ejsという名前でコピー。<br>4行目の  </p>
<pre><code>&lt;%- partial(&#39;post/date&#39;, {class_name: &#39;article-date&#39;, date_format: null}) %&gt;
</code></pre><p>を削除。  </p>
<p>page.ejsの  </p>
<pre><code>&lt;%- partial(&#39;_partial/article&#39;, {post: page, index: false}) %&gt;
</code></pre><p>を</p>
<pre><code>&lt;%- partial(&#39;_partial/article-page&#39;, {post: page, index: false}) %&gt;
</code></pre><p>に変更した。  </p>
<p>希望通り、日付けが削除された。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexoでは固定ページを作る際、コマンド<code>hexo new page （ページ名）</code>でsource/（ページ名）下にindex.mdが作成される。<br>tagsやcategoriesは使えないようになっている。<br>コメントを禁止にするには、Fro]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HexoやOctopressのトップページを全文表示ではなく概要表示にする]]></title>
    <link href="http://pagent.github.io/2014/11/29/excerpt-separator/"/>
    <id>http://pagent.github.io/2014/11/29/excerpt-separator/</id>
    <published>2014-11-29T04:37:03.000Z</published>
    <updated>2014-11-29T10:13:47.000Z</updated>
    <content type="html"><![CDATA[<p>Hexoでトップページを表示した時、複数の記事の全文がだらだらと表示されているのは見づらいと思い、前半部分を抜粋した概要表示にしてみた。<br>やり方は簡単で、記事ソースの適当な箇所に<code>&lt;!-- more --&gt;</code>というタグを挿入するだけ。  </p>
<p>WordPressやMovable Typeでは、200文字など決まった文字数で自動的に抜粋してくれたりもするが、その方法はちょっと分からないので、手動で挿入した。<br>タグを挿入すると<code>&lt;!-- more --&gt;</code>より前の部分だけの表示になる。<br>続きを読むためのリンクの文言「Read More」はHexo作業フォルダの_config.ymlではなく、themes/landscape/_config.ymlなどテーマ毎の_config.ymlで変更出来る。  </p>
<p>Octopressの場合は_config.ymlの<code>excerpt_link:</code>でリンクの文言を変えられる。<br>また_config.ymlの<code>excerpt_link:</code>で、抜粋するためのタグ自体を<code>&lt;!-- more --&gt;</code>から別のものに変更出来るようだ。  </p>
<p>ーー<br>（追記）<br>概要表示にはしてみたが、全文表示の方が都合の良いことがあったので、あとで全ての記事から<code>&lt;!-- more --&gt;</code>タグを削除した。<br>_postsで端末を開き、下記コマンドですべての.mdファイルから<code>&lt;!-- more --&gt;</code>を一括削除。</p>
<pre><code>$ perl -p -i.bak -e &#39;s/&lt;!-- more --&gt;//g&#39; *.md
（すべての.mdファイルに拡張子.bakをつけてバックアップを取り、ファイル内の&lt;!-- more --&gt;を削除）
</code></pre><p><code>&lt;!-- more --&gt;</code>が正常に削除されたことを確認後、.bakファイルを一括削除した。  </p>
<pre><code>$ find . -type f -name &quot;*.bak&quot; -delete
（拡張子が「.bak」のファイルをカレントディレクトリで一括削除）
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>Hexoでトップページを表示した時、複数の記事の全文がだらだらと表示されているのは見づらいと思い、前半部分を抜粋した概要表示にしてみた。<br>やり方は簡単で、記事ソースの適当な箇所に<code>&lt;!-- more --&gt;</code>というタグを挿入するだけ。]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
      <category term="Octopress" scheme="http://pagent.github.io/tags/Octopress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[.deploy/.git/objectsが大きくなってきたのでgit gcしてみた]]></title>
    <link href="http://pagent.github.io/2014/11/28/git-gc/"/>
    <id>http://pagent.github.io/2014/11/28/git-gc/</id>
    <published>2014-11-28T12:31:38.000Z</published>
    <updated>2014-12-02T13:28:56.000Z</updated>
    <content type="html"><![CDATA[<p>それほど記事数は多くないのに、Hexoのサイズが大きくなって来た。<br>最初、数MBだったのが20MB以上になっている。  </p>
<p>.deploy/.git/objectsが12.4MBあって、一番容量をくっているようだ。<br>ちょこちょこ記事を修正してその度にdeployしているせいだろう。<br>大した容量ではないが、Dropboxの同期に時間が掛かるのが困る。  </p>
<p>必要性の低いようなオブジェクトが多数あったりすると、自動的にパックファイルを作って掃除（pack up）してくれるようだが、<code>git gc</code>コマンドにより手動でpack upすることも出来るらしい。<br><a href="http://heart-shaped-chocolate.hatenablog.jp/entry/2013/04/10/052752" target="_blank" rel="external">.git/objectsについて少し調べてみた - 煙と消えるその前に</a>  </p>
<p>GitHubではないが、BitbucketのFAQには<code>git gc</code>してもリポジトリに悪い影響はないと書いてあった。<br><a href="https://confluence.atlassian.co.jp/pages/viewpage.action?pageId=35815474" target="_blank" rel="external">私のリポジトリで git gc (保全作業) を実行する必要がありますか？ - Bitbucket ドキュメンテーション - アトラシアン日本語ドキュメント</a>  </p>
<p>早速、.deployで端末を開いて、<code>git gc</code>してみた。  </p>
<pre><code>$ git gc
Counting objects: 5328, done.
Delta compression using up to 8 threads.
Compressing objects:   5% (153/3046)   
Compressing objects: 100% (3046/3046), done.
Writing objects: 100% (5328/5328), done.
Total 5328 (delta 2157), reused 0 (delta 0)
</code></pre><p>少し待たないといけなかったが、objects下にたくさんあったフォルダが消えて、4つだけになった。<br>objects/pack内にはpack-〜.idxとpack-〜.packというファイルが出来てる。<br>objectsのサイズは12.4MB→1.8MBに縮小した。  </p>
<p>あんまり頻回に更新しなくてもいいように、プレビュー時にはちゃんと校正しなければ。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>それほど記事数は多くないのに、Hexoのサイズが大きくなって来た。<br>最初、数MBだったのが20MB以上になっている。  </p>
<p>.deploy/.git/objectsが12.4MBあって、一番容量をくっているようだ。<br>ちょこちょこ記事を修正してその度に]]>
    </summary>
    
      <category term="Git" scheme="http://pagent.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[プログラム音痴がMetalsmithを試してみた]]></title>
    <link href="http://pagent.github.io/2014/11/28/metalsmith/"/>
    <id>http://pagent.github.io/2014/11/28/metalsmith/</id>
    <published>2014-11-28T06:22:40.000Z</published>
    <updated>2014-12-02T13:21:40.000Z</updated>
    <content type="html"><![CDATA[<p>静的サイトジェネレーターは有名なものしか知らなかったが、かなりの数が公開されているようだ。<br><a href="https://staticsitegenerators.net/" target="_blank" rel="external">https://staticsitegenerators.net/</a><br><a href="https://www.staticgen.com/" target="_blank" rel="external">https://www.staticgen.com/</a>  </p>
<p><a href="https://github.com/segmentio/metalsmith" target="_blank" rel="external">Metalsmith</a>（An extremely simple, pluggable static site generator.）というのが人気急上昇中のようなので、試してみた。<br>Hexo同様、プログラミング言語がJavaScriptなので、早さも期待できる。  </p>
<p>テストするにあたり、下記サイトを参考にさせて頂いた。<br><a href="http://h2ham.net/metalsmith-static-site-generator" target="_blank" rel="external">Nodeで動作する静的サイトジェネレータ「metalsmith」を使ってみた - HAM MEDIA MEMO</a><br><a href="http://web-layman.com/metalsmith-simple-static-site-generator/" target="_blank" rel="external">metalsmith - シンプルな静的サイトジェネレーター - Layman’s Web Creation.</a>  </p>
<p>先ずはpackage.json を用意して導入するプラグインを指定、一括インストールするのが良いようなのだが、本体やプラグインのバージョンがよく分からない。<br>なのでmetalsmith-testという作業フォルダを作り、そこで端末を開いて一個一個インストールした。  </p>
<pre><code>~/metalsmith-test$ npm install metalsmith
~/metalsmith-test$ npm install metalsmith-templates
~/metalsmith-test$ npm install swig
~/metalsmith-test$ npm install metalsmith-markdown
~/metalsmith-test$ npm install metalsmith-permalinks
~/metalsmith-test$ npm install metalsmith-sass
~/metalsmith-test$ npm install metalsmith-watch
~/metalsmith-test$ npm install metalsmith-drafts
</code></pre><p>次に作業フォルダ内にmetalsmith.jsonを作成する必要があったが、これはjekyllの構成に倣ったexampleのものをほぼそのまま使わせてもらった。<br><a href="https://github.com/segmentio/metalsmith/blob/master/examples/jekyll/metalsmith.json" target="_blank" rel="external">https://github.com/segmentio/metalsmith/blob/master/examples/jekyll/metalsmith.json</a></p>
<pre><code>{
  &quot;source&quot;: &quot;./_posts&quot;,
  &quot;destination&quot;: &quot;./_site&quot;,
  &quot;metadata&quot;: {
    &quot;title&quot;: &quot;My Jekyll-Powered Blog&quot;,
    &quot;description&quot;: &quot;My second, super-cool, Jekyll-powered blog.&quot;
  },
  &quot;plugins&quot;: {
    &quot;metalsmith-drafts&quot;: {},
    &quot;metalsmith-markdown&quot;: {},
    &quot;metalsmith-permalinks&quot;: {
      &quot;pattern&quot;: &quot;:title&quot;
    },
    &quot;metalsmith-sass&quot;: {
        &quot;outputStyle&quot;: &quot;expanded&quot;
    },
    &quot;metalsmith-templates&quot;: {
      &quot;engine&quot;: &quot;swig&quot;,
      &quot;directory&quot;: &quot;_layouts&quot;
    }
  }
}
</code></pre><p>_layoutsフォルダを作り、そこへ下記内容のpost.htmlを配置。  </p>
<pre><code>&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;My Blog&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;プログラム音痴がMetalsmithを試してみた&lt;/h1&gt;
  &lt;time&gt;2014-11-28&lt;/time&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>_postsフォルダを作り、テスト用の記事test-post-1.mdを配置。  </p>
<pre><code>---
template: post.html
title: テスト投稿１
date: 2014-11-28
---
##今日の天気
本日は晴天なり。
</code></pre><p><code>node node_modules/.bin/metalsmith</code>とコマンドを打つと、自動的に_siteフォルダ、その下にtest-post-1フォルダ、その中にindex.htmlが生成された。  </p>
<pre><code>&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;My Blog&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;テスト投稿&lt;/h1&gt;
  &lt;time&gt;2014-11-28&lt;/time&gt;
  &lt;h2 id=&quot;-&quot;&gt;今日の天気&lt;/h2&gt;
&lt;p&gt;本日は晴天なり。&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>ローカルホスト上でプレビューを可能にするプラグインmetalsmith-serveというのがあったのでインストールしたが、どう使えばいいのかよく分からない。  </p>
<p>metalsmith.jsonの<code>&quot;plugins&quot;:</code>の箇所に無理やり  </p>
<pre><code>    &quot;metalsmith-serve&quot;: {
      &quot;port&quot;: &quot;8081&quot;,
      &quot;verbose&quot;: &quot;true&quot;
    }
</code></pre><p>と加えてみたら、<code>node node_modules/.bin/metalsmith</code>のコマンドで、生成と共にローカルホストが立ち上がった。<br>ブラウザで<code>http://localhost:8081/test-post-1/</code>にアクセスすると、CSSは当たっていないが表示はされた。  </p>
<p>たぶん正しい使い方ではないのだと思うが、プラグインの説明の  </p>
<pre><code>var metalsmith = require(&#39;metalsmith&#39;);
var serve = require(&#39;metalsmith-serve&#39;);

metalsmith(__dirname)
  .use(serve())
  .build();
</code></pre><p>というのを何処で設定するのか分からない。  </p>
<p>トップページの生成の仕方やCSSの当て方なども勉強する必要がありそう。<br>それに、新規記事作成やgenerate、プレビューなど、それぞれコマンドに割り当てて操作したいところ。  </p>
<p>Metalsmithのサイトの上方に記載してある  </p>
<pre><code>Metalsmith(__dirname)
  .use(drafts())
  .use(markdown())
  .use(permalinks(&#39;posts/:title&#39;))
  .use(templates(&#39;handlebars&#39;))
  .build();
</code></pre><p>というのも、いったいどこの記載のことなんだか。</p>
<p>「Everything is a Plugin」と謳われているようにカスタマイズ性は高そうだが、Jekyllの使い方が分からずOctopressに移った自分のようなプログラム音痴には、少々ハードルが高そうだ。<br>静的サイトジェネレーターの仕組みを勉強するには良さそうだが。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>静的サイトジェネレーターは有名なものしか知らなかったが、かなりの数が公開されているようだ。<br><a href="https://staticsitegenerators.net/" target="_blank" rel="external">https://stati]]>
    </summary>
    
      <category term="Metalsmith" scheme="http://pagent.github.io/tags/Metalsmith/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexoは中国製のようだ]]></title>
    <link href="http://pagent.github.io/2014/11/27/hexo-china/"/>
    <id>http://pagent.github.io/2014/11/27/hexo-china/</id>
    <published>2014-11-27T11:13:57.000Z</published>
    <updated>2014-11-29T04:11:25.000Z</updated>
    <content type="html"><![CDATA[<p>しばらく前に静的サイトジェネレーターをOctopressからHexoに乗り換えた。<br>カスタマイズもわりと容易だしgenerateも早いし、気に入って使っている。  </p>
<p>公開されているカスタムテーマを見ていて、なぜかデモサイトに中国語が多いなと不信に思っていが、オフィシャルテーマ３つのLICENSEを見ると３つとも中国人っぽい名前が記載されている。  </p>
<p>よく見ると、レポジトリもオフィシャルサイトもこの中国人らしい人のものだった。<br>なんとHexoは中国製だったんだね。</p>
<p>中国と聞くと正直ちょっと心配になってしまう。<br>中国製のパソコンに不正プログラムが入っていたなんてニュースもあったし。<br>ただ、cloneしてくるHexoのソースはGitHub上で公開されているものだし、大丈夫なのだろう。  </p>
<p>中国人、なかなかやるね。<br>ちょっとくやしい気がする。  </p>
<p>日本製の秀逸な静的サイトジェネレーターが出てきてくれないものだろうか。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>しばらく前に静的サイトジェネレーターをOctopressからHexoに乗り換えた。<br>カスタマイズもわりと容易だしgenerateも早いし、気に入って使っている。  </p>
<p>公開されているカスタムテーマを見ていて、なぜかデモサイトに中国語が多いなと不信に思ってい]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo新規記事作成時のタイトル大文字アルファベットを小文字のファイル名に]]></title>
    <link href="http://pagent.github.io/2014/11/26/filename-case/"/>
    <id>http://pagent.github.io/2014/11/26/filename-case/</id>
    <published>2014-11-26T09:50:31.000Z</published>
    <updated>2014-11-29T10:17:31.000Z</updated>
    <content type="html"><![CDATA[<p>Hexoのデフォルト設定で新規記事を作成する際、記事タイトルに大文字アルファベットを使うと、そのままファイル名としてソースが作成される。</p>
<pre><code>$ hexo new New-Post
[info] File created at /.../source/_posts/2014-11-26-New-Post.md
</code></pre><p>URLに大文字アルファベットが入ってしまう。  </p>
<p>URLに大文字は使いたくないので、Octopressのように大文字→小文字でファイル出力して欲しい。  </p>
<p>_config.ymlのWritingの項目<code>filename_case:</code>の値をデフォルトの「0」から「1」に変更することで設定出来た。  </p>
<pre><code>$ hexo new New-Post
[info] File created at /.../source/_posts/2014-11-26-new-post.md
</code></pre><p>filename_case: 0（そのまま出力。New-Post→New-Post）  </p>
<p>filename_case: 1（大文字を小文字に変換。New-Post→new-post.md）  </p>
<p>filename_case: 2（すべて大文字に変換。New-Post→NEW-POST.md）  </p>
<p>ーー<br>（追記）<br>出来たと思ったら、generateした際にtagsまでがすべて小文字になってしまった。<br>これでは困るので、<code>filename_case: 0</code>に戻した。<br>当面、大文字のファイル名は手作業で小文字にするしかなさそうだ。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexoのデフォルト設定で新規記事を作成する際、記事タイトルに大文字アルファベットを使うと、そのままファイル名としてソースが作成される。</p>
<pre><code>$ hexo new New-Post
[info] File created at /.../sourc]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HexoのソースをBitbucketに置く]]></title>
    <link href="http://pagent.github.io/2014/11/26/hexo-bitbucket/"/>
    <id>http://pagent.github.io/2014/11/26/hexo-bitbucket/</id>
    <published>2014-11-26T07:47:16.000Z</published>
    <updated>2014-11-29T10:17:16.000Z</updated>
    <content type="html"><![CDATA[<p>Hexoの作業フォルダはWindows領域のDropboxフォルダに置き、他のPCとも同期をとっている。<br>これでソースを消失してしまう危険はかなり低いと思うが、Dropboxと同期する際、結構時間がかかってしまう。<br>普段はDropboxを起動しておらず時々立ち上げる、という形をとっているせいもあるかもしれない。  </p>
<p>Bitbucketにソースを置いたらpushするのはそれほど時間は掛からないだろうし、過去の履歴も残ってくれてやはり便利だろうと思い、HexoのソースをBitbucketに置くことにした。  </p>
<p>OctopressのソースをBitbucketに置いた時と同様、Bitbucketにhexoという名前のリポジトリを作り、  </p>
<pre><code>$ git remote add bitbucket git@bitbucket.org:ユーザー名/hexo.git
$ git push -u bitbucket source
</code></pre><p>とやったが、エラーになる。  </p>
<p>新規リポジトリを作成後に表示されたRepository setupの指示に倣い、  </p>
<pre><code>$ git init
$ git remote add bitbucket git@bitbucket.org:ユーザー名/hexo.git
$ echo &quot;ユーザー名&quot; &gt;&gt; contributors.txt
$ git add contributors.txt
$ git commit -m &#39;Initial commit with contributors&#39;
$ git push -u bitbucket source
</code></pre><p>としても、やはり  </p>
<pre><code>error: src refspec source does not match any.
error: failed to push some refs to &#39;git@bitbucket.org:ユーザー名/hexo.git&#39;
</code></pre><p>とエラーになる。  </p>
<p>pushするbranchをsourceではなく、masterにしてみた。  </p>
<pre><code>$ git push -u bitbucket master
Counting objects: 3, done.
Writing objects: 100% (3/3), 239 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@bitbucket.org:ユーザー名/hexo.git
 * [new branch]      master -&gt; master
Branch master set up to track remote branch master from bitbucket.
</code></pre><p>上手く行ったようだ。  </p>
<p>だが、その後も  </p>
<pre><code>$ git add .
warning: You ran &#39;git add&#39; with neither &#39;-A (--all)&#39; or &#39;--ignore-removal&#39;,
whose behaviour will change in Git 2.0 with respect to paths you removed.
Paths like &#39;contributors.txt&#39; that are
removed from your working tree are ignored with this version of Git.

* &#39;git add --ignore-removal &lt;pathspec&gt;&#39;, which is the current default,
  ignores paths you removed from your working tree.

* &#39;git add --all &lt;pathspec&gt;&#39; will let you also record the removals.

Run &#39;git status&#39; to check the paths you removed from your working tree.
</code></pre><p>と言われたり、  </p>
<pre><code>$ git push
warning: push.default is unset; its implicit value is changing in
Git 2.0 from &#39;matching&#39; to &#39;simple&#39;. To squelch this message
and maintain the current behavior after the default changes, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

When push.default is set to &#39;matching&#39;, git will push local branches
to the remote branches that already exist with the same name.

In Git 2.0, Git will default to the more conservative &#39;simple&#39;
behavior, which only pushes the current branch to the corresponding
remote branch that &#39;git pull&#39; uses to update the current branch.

See &#39;git help config&#39; and search for &#39;push.default&#39; for further information.
(the &#39;simple&#39; mode was introduced in Git 1.7.11. Use the similar mode
&#39;current&#39; instead of &#39;simple&#39; if you sometimes use older versions of Git)
</code></pre><p>と言われたり。  </p>
<p><code>git add .</code>は使われなくなったので<code>git add -A</code>にしないといけないということか？<br><code>git add .</code>でもすんなり通る時もあるのは、状況の違いからだろうか。<br>（追記：そう言えば、Initial commitの時に作成されたcontributors.txtという中身が自分のユーザー名だけのファイルを、レポジトリとHexoの作業フォルダ両方から手動で削除したんだった。<br>これのせいだったのかもしれない。）</p>
<p>push.defaultもmatchingにした。  </p>
<pre><code>  $ git config --global push.default matching
</code></pre><p>これでようやくpush出来るようになった。  </p>
<p>gitの仕組みがいまいちよく分からない。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexoの作業フォルダはWindows領域のDropboxフォルダに置き、他のPCとも同期をとっている。<br>これでソースを消失してしまう危険はかなり低いと思うが、Dropboxと同期する際、結構時間がかかってしまう。<br>普段はDropboxを起動しておらず時々立ち上]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
      <category term="Git" scheme="http://pagent.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo→Octopress変換スクリプト「Hexo to Octopress Converter」]]></title>
    <link href="http://pagent.github.io/2014/11/25/hexo-to-octopress-converter/"/>
    <id>http://pagent.github.io/2014/11/25/hexo-to-octopress-converter/</id>
    <published>2014-11-25T11:59:04.000Z</published>
    <updated>2014-11-29T10:17:52.000Z</updated>
    <content type="html"><![CDATA[<p>HexoからOctopressに記事ソースを変換するrubyスクリプト<a href="https://github.com/ciffel/Hexo-to-Octopress-Converter" target="_blank" rel="external">「Hexo to Octopress Converter」</a>を試してみた。  </p>
<p>「Download ZIP」からzipファイルをダウンロードし展開。converterファイルを作業したい場所に移し、端末から操作。  </p>
<pre><code>$ ./converter &lt;hexo_posts_dir&gt; &lt;octopress_posts_dir&gt;
</code></pre><p>で変換出来る。<br><code>&lt;octopress_posts_dir&gt;</code>は適当に作ったフォルダでも可。  </p>
<p>変換が終了すると、ファイル名に日付けが付加されたものがOctopressのフォルダに出力される。（拡張子は.mdのまま。）<br>出力されたファイルのFront Matter部分は<code>tags:</code>が<code>categories:</code>に変換されており、また上部の<code>---</code>および<code>layout: post</code>、<code>comments: true</code>が追加される。  </p>
<p>だが、Octopressのソースを「hexo-migrator-octopress」などでHexoに取り込んでいた場合は、Front Matter上部に既に<code>---</code>が<br>ついている。<br>この状態からだと<code>tags:</code>が<code>categories:</code>に変換されないので、上部の<code>---</code>を消しておく必要がある。  </p>
<p>また<code>title:</code>の項目で記事タイトルが「”」で挟まれていると、さらに「”」で挟まれ<code>title: &quot;&quot;（記事タイトル）&quot;&quot;</code>のようになってしまう。<br>これではOctopressでgenerateする際エラーになってしまうので、これも削除し、  </p>
<pre><code>title:
date:
tags:
---
</code></pre><p>のような形にしておく必要がある。<br><a href="/2014/11/25/hexo-migrator-octopress/">Octopress→Hexo移行のプラグイン「hexo-migrator-octopress」を試してみた </a>  </p>
<p>なお、変換出力されるのは拡張子が.mdのものだけで、.markdownのもの（Octopressのソースをコピペで取り込んだような場合）は変換出力されず無視される。  </p>
<p>変換後のファイル名には日付けが付加されるので、Hexoの運用をOctopress式に日付けをつけたファイル名で行っている場合は、日付けが2重になってしまう。  </p>
<p>この場合はconverterファイルをエディタで開き、41行目  </p>
<p>  file_name = “#{prefix}-#{base_name}”</p>
<p>の<code>#{prefix}-</code>を削除し、  </p>
<p>  file_name = “#{base_name}”</p>
<p>にしておくと、日付けが付加されない。  </p>
<p>それから、Hexoは漢字、ひらがな含め日本語のURLやtagsを使用可能だが、Octopressはデフォルトの状態では日本語を使用できない。<br>HexoからOctopressに移行する際には、この点も注意が必要。</p>
<p>ーー<br>HexoもOctopressも、共にmarkdown形式のファイルをhtmlに変換するという点では同じなのだが、細かいところが微妙に違っていて少し不便。<br>記事ソースの形式くらいは合わせられなかったものだろうか。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>HexoからOctopressに記事ソースを変換するrubyスクリプト<a href="https://github.com/ciffel/Hexo-to-Octopress-Converter" target="_blank" rel="external">「Hexo t]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
      <category term="Octopress" scheme="http://pagent.github.io/tags/Octopress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Octopress→Hexo移行のプラグイン「hexo-migrator-octopress」を試してみた]]></title>
    <link href="http://pagent.github.io/2014/11/25/hexo-migrator-octopress/"/>
    <id>http://pagent.github.io/2014/11/25/hexo-migrator-octopress/</id>
    <published>2014-11-25T09:20:00.000Z</published>
    <updated>2014-11-29T10:18:25.000Z</updated>
    <content type="html"><![CDATA[<p>OctopressとHexoでは記事ソースのファイルの形式やFront Matter（<code>---</code>で区切られた、title、dateなどの部分）が微妙に異なる。<br>OctopressのcategoriesはHexoではtagsに相当したり。  </p>
<p>Octopressの記事ソースをHexoに取り込む<a href="https://github.com/sailxjx/hexo-migrator-octopress" target="_blank" rel="external">「hexo-migrator-octopress」</a>というHexo用プラグインがあったので、試してみた。<br>（Hexoの記事ソースをOctopress用に変換するスクリプト「Hexo to Octopress Converter」とは逆向き。）  </p>
<p>デスクトップ上にhexo-test（Hexoフォルダ）とoctopress-test（Octopressフォルダ）を作った。  </p>
<p>hexo-testで端末を開き、プラグインをインストール。  </p>
<pre><code>$ npm install hexo-migrator-octopress
</code></pre><p>コマンド<code>hexo migrate octopress &lt;source&gt;</code>で記事ソースが変換され、Hexoに取り込まれる。（<code>&lt;source&gt;</code>はOctopressフォルダへのパス）<br>今回のテスト環境では</p>
<pre><code>$ hexo migrate octopress ~/Desktop/octopress-test
</code></pre><p>octopress-test/source/_posts/2014-10-25-cosmos.markdownがhexo-test/source/_posts/cosmos.mdとして取り込まれた。<br>（Hexoのデフォルト設定に従い、日付けが削除さるようだ。）  </p>
<p>Front MatterはOctopressの  </p>
<pre><code>---
layout: post
title: &quot;畑一面のコスモスはなぜ？&quot;
date: 2014-10-25 15:41:22 +0900
comments: true
categories:
- 未分類
- 写真
---
</code></pre><p>から  </p>
<pre><code>---
layout: post
title: &quot;畑一面のコスモスはなぜ？&quot;
date: 2014-10-25 15:41:22 +0900
comments: true
tags:
- 未分類
- 写真
---
</code></pre><p>に変換されたが、変更は<code>categories:</code>が<code>tags:</code>になっただけのようだ。  </p>
<p>この状態でもHexoで使えるのだが、これを「Hexo to Octopress Converter」でOctopress用に再変換すると  </p>
<pre><code>---
layout: post
comments: true
---
layout: post
title: &quot;畑一面のコスモスはなぜ？&quot;
date: 2014-10-25 15:41:22 +0900
comments: true
tags:
- 未分類
- 写真
---
</code></pre><p>となってしまい、<code>tags:</code>が<code>categories:</code>に変換されない。  </p>
<p>上部の<code>---</code>を削除しておくと<code>categories:</code>に変換はされたが、タイトルの部分が<code>title: &quot;&quot;畑一面のコスモスはなぜ？&quot;&quot;</code>と「”」が重複しまい、rake generateでエラーになる。  </p>
<p>結局、Octopress用に再変換する場合には、「hexo-migrator-octopress」でHexo用に変換したものを手作業で  </p>
<pre><code>title: 畑一面のコスモスはなぜ？
date: 2014-10-25 15:41:22 +0900
tags:
- 未分類
- 写真
---
</code></pre><p>のように変更しておく必要がありそうだ。<br>それにOctopressでcategoriesとtagsを両方使っていた場合は変換後<code>tags:</code>が重複してしまう。  </p>
<p>それから、Hexoの新規記事ソースはデフォルトでは日付けがつかないが、_config.ymlの<code>new_post_name:</code>で日付けをつけることが出来る。<br>日付けがあった方が同じタイトルの記事を複数書けたり、過去記事編集の際に探し易かったりと、なにかと都合が良い。  </p>
<p>Octopressの方のファイル拡張子が.markdownではなく.mdなら「Hexo to Octopress Converter」で変換しても日付けが削除されないので、前もって.mdに変えておいた方が良いかもしれない。<br>拡張子が.mdでも<code>tags:</code>は<code>categories:</code>に変換される。  </p>
<p>拡張子の一括変換は/_postsディレクトリで  </p>
<pre><code>$ rename &#39;s/.markdown/.md/&#39; *.markdown
</code></pre><p>とするか、ファイルマネージャーThunarを使えば簡単のようだ。  </p>
<p>ーー<br>（関連記事）<br><a href="/2014/11/25/Hexo-to-Octopress-Converter/">Hexo→Octopress変換スクリプト「Hexo to Octopress Converter」</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>OctopressとHexoでは記事ソースのファイルの形式やFront Matter（<code>---</code>で区切られた、title、dateなどの部分）が微妙に異なる。<br>OctopressのcategoriesはHexoではtagsに相当したり。  </p]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
      <category term="Octopress" scheme="http://pagent.github.io/tags/Octopress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WindowsでHexoを使う（deploy）]]></title>
    <link href="http://pagent.github.io/2014/11/24/hexo-windows-deploy/"/>
    <id>http://pagent.github.io/2014/11/24/hexo-windows-deploy/</id>
    <published>2014-11-24T11:31:27.000Z</published>
    <updated>2014-12-02T13:05:08.000Z</updated>
    <content type="html"><![CDATA[<p>Windows 7にインストールしたHexoだが、作業フォルダはLinuxと共用なので、そのままdeploy出来ると思っていた。<br>だが、  </p>
<pre><code>Run

  git config --global user.email &quot;you@example.com&quot;
  git config --global user.name &quot;Your Name&quot;
</code></pre><p>と言われてしまった。  </p>
<p>メールアドレスとGithubユーザー名を設定して、再度deployしようとしたが、  </p>
<pre><code>Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre><p>とrejectされる。  </p>
<p>SSHキーの設定が必要のようなので、Linuxで設定したSSH公開鍵を<code>C:\Users\（ユーザー名）\.ssh</code>にコピペしたが、やはりrejectされる。<br>秘密鍵もコピペしたら、ようやくdeploy出来た。<br>これで無事WindowsでもHexoを使えるようになった。  </p>
<p>Hexoにはローカルホストで使う管理画面プラグインもあるようなので、もう少し導入が簡単になればWindowsユーザーにも静的サイトジェネレーターが広まる可能性があるんじゃないだろうか。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Windows 7にインストールしたHexoだが、作業フォルダはLinuxと共用なので、そのままdeploy出来ると思っていた。<br>だが、  </p>
<pre><code>Run

  git config --global user.email &quot;you@]]>
    </summary>
    
      <category term="Hexo" scheme="http://pagent.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
